{
  "basePath": "/",
  "host": "oauth.reddit.com",
  "info": {
    "description": "The Reddit API",
    "title": "Reddit",
    "version": ""
  },
  "paths": {
    "/{sort}": {
      "get": {
        "description": "This endpoint is a listing.",
        "parameters": [
          {
            "description": "fullname of a thing",
            "in": "query",
            "name": "after",
            "type": "string"
          },
          {
            "description": "fullname of a thing",
            "in": "query",
            "name": "before",
            "type": "string"
          },
          {
            "description": "a positive integer (default: 0)",
            "in": "query",
            "name": "count",
            "type": "string"
          },
          {
            "description": "boolean value",
            "in": "query",
            "name": "include_categories",
            "type": "string"
          },
          {
            "description": "the maximum number of items desired (default: 25, maximum: 100)",
            "in": "query",
            "name": "limit",
            "type": "string"
          },
          {
            "description": "(optional) the string all",
            "in": "query",
            "name": "show",
            "type": "string"
          },
          {
            "description": "(optional) expand subreddits",
            "in": "query",
            "name": "sr_detail",
            "type": "string"
          },
          {
            "description": "one of (hour, day, week, month, year, all)",
            "in": "query",
            "name": "t",
            "type": "string"
          },
          {
            "in": "path",
            "name": "sort",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/about/{location}": {
      "get": {
        "description": "Return a listing of posts relevant to moderators.\n\n\nreports: Things that have been reported.\nspam: Things that have been marked as spam or otherwise removed.\nmodqueue: Things requiring moderator review, such as reported things\nand items caught by the spam filter.\nunmoderated: Things that have yet to be approved/removed by a mod.\nedited: Things that have been edited recently.\n\n\nRequires the \"posts\" moderator permission for the subreddit.\n\nThis endpoint is a listing.",
        "parameters": [
          {
            "description": "fullname of a thing",
            "in": "query",
            "name": "after",
            "type": "string"
          },
          {
            "description": "fullname of a thing",
            "in": "query",
            "name": "before",
            "type": "string"
          },
          {
            "description": "a positive integer (default: 0)",
            "in": "query",
            "name": "count",
            "type": "string"
          },
          {
            "description": "the maximum number of items desired (default: 25, maximum: 100)",
            "in": "query",
            "name": "limit",
            "type": "string"
          },
          {
            "in": "path",
            "name": "location",
            "required": true,
            "type": "string"
          },
          {
            "description": "one of (links, comments)",
            "in": "query",
            "name": "only",
            "type": "string"
          },
          {
            "description": "(optional) the string all",
            "in": "query",
            "name": "show",
            "type": "string"
          },
          {
            "description": "(optional) expand subreddits",
            "in": "query",
            "name": "sr_detail",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/about/{where}": {
      "get": {
        "description": "This endpoint is a listing.",
        "parameters": [
          {
            "description": "fullname of a thing",
            "in": "query",
            "name": "after",
            "type": "string"
          },
          {
            "description": "fullname of a thing",
            "in": "query",
            "name": "before",
            "type": "string"
          },
          {
            "description": "a positive integer (default: 0)",
            "in": "query",
            "name": "count",
            "type": "string"
          },
          {
            "description": "boolean value",
            "in": "query",
            "name": "include_categories",
            "type": "string"
          },
          {
            "description": "the maximum number of items desired (default: 25, maximum: 100)",
            "in": "query",
            "name": "limit",
            "type": "string"
          },
          {
            "description": "(optional) the string all",
            "in": "query",
            "name": "show",
            "type": "string"
          },
          {
            "description": "(optional) expand subreddits",
            "in": "query",
            "name": "sr_detail",
            "type": "string"
          },
          {
            "description": "A valid, existing reddit username",
            "in": "query",
            "name": "user",
            "type": "string"
          },
          {
            "in": "path",
            "name": "where",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/about/log": {
      "get": {
        "description": "Get a list of recent moderation actions.\n\nModerator actions taken within a subreddit are logged. This listing is\na view of that log with various filters to aid in analyzing the\ninformation.\n\nThe optional mod parameter can be a comma-delimited list of moderator\nnames to restrict the results to, or the string a to restrict the\nresults to admin actions taken within the subreddit.\n\nThe type parameter is optional and if sent limits the log entries\nreturned to only those of the type specified.\n\nThis endpoint is a listing.",
        "parameters": [
          {
            "description": "fullname of a thing",
            "in": "query",
            "name": "after",
            "type": "string"
          },
          {
            "description": "fullname of a thing",
            "in": "query",
            "name": "before",
            "type": "string"
          },
          {
            "description": "a positive integer (default: 0)",
            "in": "query",
            "name": "count",
            "type": "string"
          },
          {
            "description": "the maximum number of items desired (default: 25, maximum: 500)",
            "in": "query",
            "name": "limit",
            "type": "string"
          },
          {
            "description": "(optional) a moderator filter",
            "in": "query",
            "name": "mod",
            "type": "string"
          },
          {
            "description": "(optional) the string all",
            "in": "query",
            "name": "show",
            "type": "string"
          },
          {
            "description": "(optional) expand subreddits",
            "in": "query",
            "name": "sr_detail",
            "type": "string"
          },
          {
            "description": "one of (banuser, unbanuser, spamlink, removelink, approvelink, spamcomment, removecomment, approvecomment, addmoderator, invitemoderator, uninvitemoderator, acceptmoderatorinvite, removemoderator, addcontributor, removecontributor, editsettings, editflair, distinguish, marknsfw, wikibanned, wikicontributor, wikiunbanned, wikipagelisted, removewikicontributor, wikirevise, wikipermlevel, ignorereports, unignorereports, setpermissions, setsuggestedsort, sticky, unsticky, setcontestmode, unsetcontestmode, lock, unlock, muteuser, unmuteuser, createrule, editrule, deleterule, spoiler, unspoiler, modmail_enrollment, community_styling, community_widgets, markoriginalcontent)",
            "in": "query",
            "name": "type",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/{subreddit}_stylesheet": {
      "post": {
        "description": "Update a subreddit's stylesheet.\n\nop should be save to update the contents of the stylesheet.",
        "parameters": [
          {
            "description": "the string json",
            "in": "formData",
            "name": "api_type",
            "type": "string"
          },
          {
            "description": "one of (save, preview)",
            "in": "formData",
            "name": "op",
            "type": "string"
          },
          {
            "description": "a string up to 256 characters long, consisting of printable characters.",
            "in": "formData",
            "name": "reason",
            "type": "string"
          },
          {
            "description": "the new stylesheet content",
            "in": "formData",
            "name": "stylesheet_contents",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          },
          {
            "in": "path",
            "name": "subreddit",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/accept_moderator_invite": {
      "post": {
        "description": "Accept an invite to moderate the specified subreddit.\n\nThe authenticated user must have been invited to moderate the subreddit\nby one of its current moderators.\n\nSee also: /api/friend and\n/subreddits/mine.",
        "parameters": [
          {
            "description": "the string json",
            "in": "formData",
            "name": "api_type",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/approve": {
      "post": {
        "description": "Approve a link or comment.\n\nIf the thing was removed, it will be re-inserted into appropriate\nlistings. Any reports on the approved thing will be discarded.\n\nSee also: /api/remove.",
        "parameters": [
          {
            "description": "fullname of a thing",
            "in": "formData",
            "name": "id",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/block": {
      "post": {
        "description": "For blocking the author of a thing via inbox.",
        "parameters": [
          {
            "description": "fullname of a thing",
            "in": "formData",
            "name": "id",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/block_user": {
      "post": {
        "description": "For blocking a user.",
        "parameters": [
          {
            "description": "fullname of a account",
            "in": "formData",
            "name": "account_id",
            "type": "string"
          },
          {
            "description": "the string json",
            "in": "formData",
            "name": "api_type",
            "type": "string"
          },
          {
            "description": "A valid, existing reddit username",
            "in": "formData",
            "name": "name",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/clearflairtemplates": {
      "post": {
        "parameters": [
          {
            "description": "the string json",
            "in": "formData",
            "name": "api_type",
            "type": "string"
          },
          {
            "description": "one of (USER_FLAIR, LINK_FLAIR)",
            "in": "formData",
            "name": "flair_type",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/collapse_message": {
      "post": {
        "description": "Collapse a message\n\nSee also: /api/uncollapse_message",
        "parameters": [
          {
            "description": "A comma-separated list of thing fullnames",
            "in": "formData",
            "name": "id",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/comment": {
      "post": {
        "description": "Submit a new comment or reply to a message.\n\nparent is the fullname of the thing being replied to. Its value\nchanges the kind of object created by this request:\n\n\nthe fullname of a Link: a top-level comment in that Link's thread. (requires submit scope)\nthe fullname of a Comment: a comment reply to that comment. (requires submit scope)\nthe fullname of a Message: a message reply to that message. (requires privatemessages scope)\n\n\ntext should be the raw markdown body of the comment or message.\n\nTo start a new message thread, use /api/compose.",
        "parameters": [
          {
            "description": "the string json",
            "in": "formData",
            "name": "api_type",
            "type": "string"
          },
          {
            "description": "boolean value",
            "in": "formData",
            "name": "return_rtjson",
            "type": "string"
          },
          {
            "description": "JSON data",
            "in": "formData",
            "name": "richtext_json",
            "type": "string"
          },
          {
            "description": "raw markdown text",
            "in": "formData",
            "name": "text",
            "type": "string"
          },
          {
            "description": "fullname of parent thing",
            "in": "formData",
            "name": "thing_id",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/compose": {
      "post": {
        "description": "Handles message composition under /message/compose.",
        "parameters": [
          {
            "description": "the string json",
            "in": "formData",
            "name": "api_type",
            "type": "string"
          },
          {
            "description": "subreddit name",
            "in": "formData",
            "name": "from_sr",
            "type": "string"
          },
          {
            "in": "formData",
            "name": "g-recaptcha-response",
            "type": "string"
          },
          {
            "description": "a string no longer than 100 characters",
            "in": "formData",
            "name": "subject",
            "type": "string"
          },
          {
            "description": "raw markdown text",
            "in": "formData",
            "name": "text",
            "type": "string"
          },
          {
            "description": "the name of an existing user",
            "in": "formData",
            "name": "to",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/del": {
      "post": {
        "description": "Delete a Link or Comment.",
        "parameters": [
          {
            "description": "fullname of a thing created by the user",
            "in": "formData",
            "name": "id",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/del_msg": {
      "post": {
        "description": "Delete messages from the recipient's view of their inbox.",
        "parameters": [
          {
            "description": "fullname of a thing",
            "in": "formData",
            "name": "id",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/delete_sr_banner": {
      "post": {
        "description": "Remove the subreddit's custom mobile banner.\n\nSee also: /api/upload_sr_img.",
        "parameters": [
          {
            "description": "the string json",
            "in": "formData",
            "name": "api_type",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/delete_sr_header": {
      "post": {
        "description": "Remove the subreddit's custom header image.\n\nThe sitewide-default header image will be shown again after this call.\n\nSee also: /api/upload_sr_img.",
        "parameters": [
          {
            "description": "the string json",
            "in": "formData",
            "name": "api_type",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/delete_sr_icon": {
      "post": {
        "description": "Remove the subreddit's custom mobile icon.\n\nSee also: /api/upload_sr_img.",
        "parameters": [
          {
            "description": "the string json",
            "in": "formData",
            "name": "api_type",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/delete_sr_img": {
      "post": {
        "description": "Remove an image from the subreddit's custom image set.\n\nThe image will no longer count against the subreddit's image limit.\nHowever, the actual image data may still be accessible for an\nunspecified amount of time. If the image is currently referenced by the\nsubreddit's stylesheet, that stylesheet will no longer validate and\nwon't be editable until the image reference is removed.\n\nSee also: /api/upload_sr_img.",
        "parameters": [
          {
            "description": "the string json",
            "in": "formData",
            "name": "api_type",
            "type": "string"
          },
          {
            "description": "a valid subreddit image name",
            "in": "formData",
            "name": "img_name",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/deleteflair": {
      "post": {
        "parameters": [
          {
            "description": "the string json",
            "in": "formData",
            "name": "api_type",
            "type": "string"
          },
          {
            "description": "a user by name",
            "in": "formData",
            "name": "name",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/deleteflairtemplate": {
      "post": {
        "parameters": [
          {
            "description": "the string json",
            "in": "formData",
            "name": "api_type",
            "type": "string"
          },
          {
            "in": "formData",
            "name": "flair_template_id",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/distinguish": {
      "post": {
        "description": "Distinguish a thing's author with a sigil.\n\nThis can be useful to draw attention to and confirm the identity of the\nuser in the context of a link or comment of theirs. The options for\ndistinguish are as follows:\n\n\nyes - add a moderator distinguish ([M]). only if the user is a\n      moderator of the subreddit the thing is in.\nno - remove any distinguishes.\nadmin - add an admin distinguish ([A]). admin accounts only.\nspecial - add a user-specific distinguish. depends on user.\n\n\nThe first time a top-level comment is moderator distinguished, the\nauthor of the link the comment is in reply to will get a notification\nin their inbox.\n\nsticky is a boolean flag for comments, which will stick the\ndistingushed comment to the top of all comments threads. If a comment\nis marked sticky, it will override any other stickied comment for that\nlink (as only one comment may be stickied at a time.) Only top-level\ncomments may be stickied.",
        "parameters": [
          {
            "description": "the string json",
            "in": "formData",
            "name": "api_type",
            "type": "string"
          },
          {
            "description": "one of (yes, no, admin, special)",
            "in": "formData",
            "name": "how",
            "type": "string"
          },
          {
            "description": "fullname of a thing",
            "in": "formData",
            "name": "id",
            "type": "string"
          },
          {
            "description": "boolean value",
            "in": "formData",
            "name": "sticky",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/editusertext": {
      "post": {
        "description": "Edit the body text of a comment or self-post.",
        "parameters": [
          {
            "description": "the string json",
            "in": "formData",
            "name": "api_type",
            "type": "string"
          },
          {
            "description": "boolean value",
            "in": "formData",
            "name": "return_rtjson",
            "type": "string"
          },
          {
            "description": "JSON data",
            "in": "formData",
            "name": "richtext_json",
            "type": "string"
          },
          {
            "description": "raw markdown text",
            "in": "formData",
            "name": "text",
            "type": "string"
          },
          {
            "description": "fullname of a thing",
            "in": "formData",
            "name": "thing_id",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/flair": {
      "post": {
        "parameters": [
          {
            "description": "the string json",
            "in": "formData",
            "name": "api_type",
            "type": "string"
          },
          {
            "description": "a valid subreddit image name",
            "in": "formData",
            "name": "css_class",
            "type": "string"
          },
          {
            "description": "a fullname of a link",
            "in": "formData",
            "name": "link",
            "type": "string"
          },
          {
            "description": "a user by name",
            "in": "formData",
            "name": "name",
            "type": "string"
          },
          {
            "description": "a string no longer than 64 characters",
            "in": "formData",
            "name": "text",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/flair_template_order": {
      "patch": {
        "description": "Update the order of flair templates in the specified subreddit.\n\nOrder should contain every single flair id for that flair type; omitting\nany id will result in a loss of data.",
        "parameters": [
          {
            "description": "one of (USER_FLAIR, LINK_FLAIR)",
            "in": "formData",
            "name": "flair_type",
            "type": "string"
          },
          {
            "description": "subreddit name",
            "in": "formData",
            "name": "subreddit",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/flairconfig": {
      "post": {
        "parameters": [
          {
            "description": "the string json",
            "in": "formData",
            "name": "api_type",
            "type": "string"
          },
          {
            "description": "boolean value",
            "in": "formData",
            "name": "flair_enabled",
            "type": "string"
          },
          {
            "description": "one of (left, right)",
            "in": "formData",
            "name": "flair_position",
            "type": "string"
          },
          {
            "description": "boolean value",
            "in": "formData",
            "name": "flair_self_assign_enabled",
            "type": "string"
          },
          {
            "description": "one of (`,left,right`)",
            "in": "formData",
            "name": "link_flair_position",
            "type": "string"
          },
          {
            "description": "boolean value",
            "in": "formData",
            "name": "link_flair_self_assign_enabled",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/flaircsv": {
      "post": {
        "description": "Change the flair of multiple users in the same subreddit with a\nsingle API call.\n\nRequires a string 'flair_csv' which has up to 100 lines of the form\n'user,flairtext,cssclass' (Lines beyond the 100th are ignored).\n\nIf both cssclass and flairtext are the empty string for a given\nuser, instead clears that user's flair.\n\nReturns an array of objects indicating if each flair setting was\napplied, or a reason for the failure.",
        "parameters": [
          {
            "description": "comma-seperated flair information",
            "in": "formData",
            "name": "flair_csv",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/flairlist": {
      "get": {
        "description": "This endpoint is a listing.",
        "parameters": [
          {
            "description": "fullname of a thing",
            "in": "query",
            "name": "after",
            "type": "string"
          },
          {
            "description": "fullname of a thing",
            "in": "query",
            "name": "before",
            "type": "string"
          },
          {
            "description": "a positive integer (default: 0)",
            "in": "query",
            "name": "count",
            "type": "string"
          },
          {
            "description": "the maximum number of items desired (default: 25, maximum: 1000)",
            "in": "query",
            "name": "limit",
            "type": "string"
          },
          {
            "description": "a user by name",
            "in": "query",
            "name": "name",
            "type": "string"
          },
          {
            "description": "(optional) the string all",
            "in": "query",
            "name": "show",
            "type": "string"
          },
          {
            "description": "(optional) expand subreddits",
            "in": "query",
            "name": "sr_detail",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/flairselector": {
      "post": {
        "description": "Return information about a users's flair options.\n\nIf link is given, return link flair options.\nOtherwise, return user flair options for this subreddit.\n\nThe logged in user's flair is also returned.\nSubreddit moderators may give a user by name to instead\nretrieve that user's flair.",
        "parameters": [
          {
            "description": "a fullname of a link",
            "in": "formData",
            "name": "link",
            "type": "string"
          },
          {
            "description": "a user by name",
            "in": "formData",
            "name": "name",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/flairtemplate": {
      "post": {
        "parameters": [
          {
            "description": "the string json",
            "in": "formData",
            "name": "api_type",
            "type": "string"
          },
          {
            "description": "a valid subreddit image name",
            "in": "formData",
            "name": "css_class",
            "type": "string"
          },
          {
            "in": "formData",
            "name": "flair_template_id",
            "type": "string"
          },
          {
            "description": "one of (USER_FLAIR, LINK_FLAIR)",
            "in": "formData",
            "name": "flair_type",
            "type": "string"
          },
          {
            "description": "a string no longer than 64 characters",
            "in": "formData",
            "name": "text",
            "type": "string"
          },
          {
            "description": "boolean value",
            "in": "formData",
            "name": "text_editable",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/flairtemplate_v2": {
      "post": {
        "description": "Create or update a flair template.\n\nThis new endpoint is primarily used for the redesign.",
        "parameters": [
          {
            "description": "the string json",
            "in": "formData",
            "name": "api_type",
            "type": "string"
          },
          {
            "description": "a 6-digit rgb hex color, e.g. #AABBCC",
            "in": "formData",
            "name": "background_color",
            "type": "string"
          },
          {
            "in": "formData",
            "name": "flair_template_id",
            "type": "string"
          },
          {
            "description": "one of (USER_FLAIR, LINK_FLAIR)",
            "in": "formData",
            "name": "flair_type",
            "type": "string"
          },
          {
            "description": "boolean value",
            "in": "formData",
            "name": "mod_only",
            "type": "string"
          },
          {
            "description": "a string no longer than 64 characters",
            "in": "formData",
            "name": "text",
            "type": "string"
          },
          {
            "description": "one of (light, dark)",
            "in": "formData",
            "name": "text_color",
            "type": "string"
          },
          {
            "description": "boolean value",
            "in": "formData",
            "name": "text_editable",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/friend": {
      "post": {
        "description": "Create a relationship between a user and another user or subreddit\n\nOAuth2 use requires appropriate scope based\non the 'type' of the relationship:\n\n\nmoderator: Use \"moderator_invite\"\nmoderator_invite: modothers\ncontributor: modcontributors\nbanned: modcontributors\nmuted: modcontributors\nwikibanned: modcontributors and modwiki\nwikicontributor: modcontributors and modwiki\nfriend: Use /api/v1/me/friends/{username}\nenemy: Use /api/block\n\n\nComplement to POST_unfriend",
        "parameters": [
          {
            "description": "the string json",
            "in": "formData",
            "name": "api_type",
            "type": "string"
          },
          {
            "description": "fullname of a thing",
            "in": "formData",
            "name": "ban_context",
            "type": "string"
          },
          {
            "description": "raw markdown text",
            "in": "formData",
            "name": "ban_message",
            "type": "string"
          },
          {
            "description": "a string no longer than 100 characters",
            "in": "formData",
            "name": "ban_reason",
            "type": "string"
          },
          {
            "in": "formData",
            "name": "container",
            "type": "string"
          },
          {
            "description": "an integer between 1 and 999",
            "in": "formData",
            "name": "duration",
            "type": "string"
          },
          {
            "description": "the name of an existing user",
            "in": "formData",
            "name": "name",
            "type": "string"
          },
          {
            "description": "a string no longer than 300 characters",
            "in": "formData",
            "name": "note",
            "type": "string"
          },
          {
            "in": "formData",
            "name": "permissions",
            "type": "string"
          },
          {
            "description": "one of (friend, moderator, moderator_invite, contributor, banned, muted, wikibanned, wikicontributor)",
            "in": "formData",
            "name": "type",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/hide": {
      "post": {
        "description": "Hide a link.\n\nThis removes it from the user's default view of subreddit listings.\n\nSee also: /api/unhide.",
        "parameters": [
          {
            "description": "A comma-separated list of link fullnames",
            "in": "formData",
            "name": "id",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/ignore_reports": {
      "post": {
        "description": "Prevent future reports on a thing from causing notifications.\n\nAny reports made about a thing after this flag is set on it will not\ncause notifications or make the thing show up in the various moderation\nlistings.\n\nSee also: /api/unignore_reports.",
        "parameters": [
          {
            "description": "fullname of a thing",
            "in": "formData",
            "name": "id",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/info": {
      "get": {
        "description": "Return a listing of things specified by their fullnames.\n\nOnly Links, Comments, and Subreddits are allowed.",
        "parameters": [
          {
            "description": "A comma-separated list of thing fullnames",
            "in": "query",
            "name": "id",
            "type": "string"
          },
          {
            "description": "a valid URL",
            "in": "query",
            "name": "url",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/leavecontributor": {
      "post": {
        "description": "Abdicate approved submitter status in a subreddit.\n\nSee also: /api/friend.",
        "parameters": [
          {
            "description": "fullname of a thing",
            "in": "formData",
            "name": "id",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/leavemoderator": {
      "post": {
        "description": "Abdicate moderator status in a subreddit.\n\nSee also: /api/friend.",
        "parameters": [
          {
            "description": "fullname of a thing",
            "in": "formData",
            "name": "id",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/link_flair": {
      "get": {
        "description": "Return list of available link flair for the current subreddit.\n\nWill not return flair if the user cannot set their own link flair and\nthey are not a moderator that can set flair.",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/link_flair_v2": {
      "get": {
        "description": "Return list of available link flair for the current subreddit.\n\nWill not return flair if the user cannot set their own link flair and\nthey are not a moderator that can set flair.",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/live/{thread}/accept_contributor_invite": {
      "post": {
        "description": "Accept a pending invitation to contribute to the thread.\n\nSee also: /api/live/thread/leave_contributor.",
        "parameters": [
          {
            "description": "the string json",
            "in": "formData",
            "name": "api_type",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          },
          {
            "in": "path",
            "name": "thread",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/live/{thread}/close_thread": {
      "post": {
        "description": "Permanently close the thread, disallowing future updates.\n\nRequires the close permission for this thread.",
        "parameters": [
          {
            "description": "the string json",
            "in": "formData",
            "name": "api_type",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          },
          {
            "in": "path",
            "name": "thread",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/live/{thread}/delete_update": {
      "post": {
        "description": "Delete an update from the thread.\n\nRequires that specified update must have been authored by the user or\nthat you have the edit permission for this thread.\n\nSee also: /api/live/thread/update.",
        "parameters": [
          {
            "description": "the string json",
            "in": "formData",
            "name": "api_type",
            "type": "string"
          },
          {
            "description": "the ID of a single update. e.g. LiveUpdate_ff87068e-a126-11e3-9f93-12313b0b3603",
            "in": "formData",
            "name": "id",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          },
          {
            "in": "path",
            "name": "thread",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/live/{thread}/edit": {
      "post": {
        "description": "Configure the thread.\n\nRequires the settings permission for this thread.\n\nSee also: /live/thread/about.json.",
        "parameters": [
          {
            "description": "the string json",
            "in": "formData",
            "name": "api_type",
            "type": "string"
          },
          {
            "description": "raw markdown text",
            "in": "formData",
            "name": "description",
            "type": "string"
          },
          {
            "description": "boolean value",
            "in": "formData",
            "name": "nsfw",
            "type": "string"
          },
          {
            "description": "raw markdown text",
            "in": "formData",
            "name": "resources",
            "type": "string"
          },
          {
            "description": "a string no longer than 120 characters",
            "in": "formData",
            "name": "title",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          },
          {
            "in": "path",
            "name": "thread",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/live/{thread}/hide_discussion": {
      "post": {
        "description": "Hide a linked comment thread from the discussions sidebar and listing.\n\nRequires the discussions permission for this thread.\n\nSee also: /api/live/thread/unhide_discussion.",
        "parameters": [
          {
            "description": "the string json",
            "in": "formData",
            "name": "api_type",
            "type": "string"
          },
          {
            "description": "The base 36 ID of a Link",
            "in": "formData",
            "name": "link",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          },
          {
            "in": "path",
            "name": "thread",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/live/{thread}/invite_contributor": {
      "post": {
        "description": "Invite another user to contribute to the thread.\n\nRequires the manage permission for this thread.  If the recipient\naccepts the invite, they will be granted the permissions specified.\n\nSee also: /api/live/thread/accept_contributor_invite, and\n/api/live/thread/rm_contributor_invite.",
        "parameters": [
          {
            "description": "the string json",
            "in": "formData",
            "name": "api_type",
            "type": "string"
          },
          {
            "description": "the name of an existing user",
            "in": "formData",
            "name": "name",
            "type": "string"
          },
          {
            "description": "permission description e.g. +update,+edit,-manage",
            "in": "formData",
            "name": "permissions",
            "type": "string"
          },
          {
            "description": "one of (liveupdate_contributor_invite, liveupdate_contributor)",
            "in": "formData",
            "name": "type",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          },
          {
            "in": "path",
            "name": "thread",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/live/{thread}/leave_contributor": {
      "post": {
        "description": "Abdicate contributorship of the thread.\n\nSee also: /api/live/thread/accept_contributor_invite, and\n/api/live/thread/invite_contributor.",
        "parameters": [
          {
            "description": "the string json",
            "in": "formData",
            "name": "api_type",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          },
          {
            "in": "path",
            "name": "thread",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/live/{thread}/report": {
      "post": {
        "description": "Report the thread for violating the rules of reddit.",
        "parameters": [
          {
            "description": "the string json",
            "in": "formData",
            "name": "api_type",
            "type": "string"
          },
          {
            "description": "one of (spam, vote-manipulation, personal-information, sexualizing-minors, site-breaking)",
            "in": "formData",
            "name": "type",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          },
          {
            "in": "path",
            "name": "thread",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/live/{thread}/rm_contributor": {
      "post": {
        "description": "Revoke another user's contributorship.\n\nRequires the manage permission for this thread.\n\nSee also: /api/live/thread/invite_contributor.",
        "parameters": [
          {
            "description": "the string json",
            "in": "formData",
            "name": "api_type",
            "type": "string"
          },
          {
            "description": "fullname of a account",
            "in": "formData",
            "name": "id",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          },
          {
            "in": "path",
            "name": "thread",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/live/{thread}/rm_contributor_invite": {
      "post": {
        "description": "Revoke an outstanding contributor invite.\n\nRequires the manage permission for this thread.\n\nSee also: /api/live/thread/invite_contributor.",
        "parameters": [
          {
            "description": "the string json",
            "in": "formData",
            "name": "api_type",
            "type": "string"
          },
          {
            "description": "fullname of a account",
            "in": "formData",
            "name": "id",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          },
          {
            "in": "path",
            "name": "thread",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/live/{thread}/set_contributor_permissions": {
      "post": {
        "description": "Change a contributor or contributor invite's permissions.\n\nRequires the manage permission for this thread.\n\nSee also: /api/live/thread/invite_contributor and\n/api/live/thread/rm_contributor.",
        "parameters": [
          {
            "description": "the string json",
            "in": "formData",
            "name": "api_type",
            "type": "string"
          },
          {
            "description": "the name of an existing user",
            "in": "formData",
            "name": "name",
            "type": "string"
          },
          {
            "description": "permission description e.g. +update,+edit,-manage",
            "in": "formData",
            "name": "permissions",
            "type": "string"
          },
          {
            "description": "one of (liveupdate_contributor_invite, liveupdate_contributor)",
            "in": "formData",
            "name": "type",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          },
          {
            "in": "path",
            "name": "thread",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/live/{thread}/strike_update": {
      "post": {
        "description": "Strike (mark incorrect and cross out) the content of an update.\n\nRequires that specified update must have been authored by the user or\nthat you have the edit permission for this thread.\n\nSee also: /api/live/thread/update.",
        "parameters": [
          {
            "description": "the string json",
            "in": "formData",
            "name": "api_type",
            "type": "string"
          },
          {
            "description": "the ID of a single update. e.g. LiveUpdate_ff87068e-a126-11e3-9f93-12313b0b3603",
            "in": "formData",
            "name": "id",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          },
          {
            "in": "path",
            "name": "thread",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/live/{thread}/unhide_discussion": {
      "post": {
        "description": "Unhide a linked comment thread from the discussions sidebar and listing..\n\nRequires the discussions permission for this thread.\n\nSee also: /api/live/thread/hide_discussion.",
        "parameters": [
          {
            "description": "the string json",
            "in": "formData",
            "name": "api_type",
            "type": "string"
          },
          {
            "description": "The base 36 ID of a Link",
            "in": "formData",
            "name": "link",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          },
          {
            "in": "path",
            "name": "thread",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/live/{thread}/update": {
      "post": {
        "description": "Post an update to the thread.\n\nRequires the update permission for this thread.\n\nSee also: /api/live/thread/strike_update, and\n/api/live/thread/delete_update.",
        "parameters": [
          {
            "description": "the string json",
            "in": "formData",
            "name": "api_type",
            "type": "string"
          },
          {
            "description": "raw markdown text",
            "in": "formData",
            "name": "body",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          },
          {
            "in": "path",
            "name": "thread",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/live/by_id/{names}": {
      "get": {
        "description": "Get a listing of live events by id.",
        "parameters": [
          {
            "description": "a comma-delimited list of live thread fullnames or IDs",
            "in": "path",
            "name": "names",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/live/create": {
      "post": {
        "description": "Create a new live thread.\n\nOnce created, the initial settings can be modified with\n/api/live/thread/edit and new updates\ncan be posted with\n/api/live/thread/update.",
        "parameters": [
          {
            "description": "the string json",
            "in": "formData",
            "name": "api_type",
            "type": "string"
          },
          {
            "description": "raw markdown text",
            "in": "formData",
            "name": "description",
            "type": "string"
          },
          {
            "description": "boolean value",
            "in": "formData",
            "name": "nsfw",
            "type": "string"
          },
          {
            "description": "raw markdown text",
            "in": "formData",
            "name": "resources",
            "type": "string"
          },
          {
            "description": "a string no longer than 120 characters",
            "in": "formData",
            "name": "title",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/live/happening_now": {
      "get": {
        "description": "Get some basic information about the currently featured live thread.\n\nReturns an empty 204 response for api requests if no thread is currently featured.\n\nSee also: /api/live/thread/about.",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/lock": {
      "post": {
        "description": "Lock a link.\n\nPrevents a post from receiving new comments.\n\nSee also: /api/unlock.",
        "parameters": [
          {
            "description": "fullname of a link",
            "in": "formData",
            "name": "id",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/marknsfw": {
      "post": {
        "description": "Mark a link NSFW.\n\nSee also: /api/unmarknsfw.",
        "parameters": [
          {
            "description": "fullname of a thing",
            "in": "formData",
            "name": "id",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/mod/bulk_read": {
      "post": {
        "description": "Marks all conversations read for a particular conversation state\nwithin the passed list of subreddits.",
        "parameters": [
          {
            "description": "comma-delimited list of subreddit names",
            "in": "formData",
            "name": "entity",
            "type": "string"
          },
          {
            "description": "one of (new, inprogress, mod, notifications, archived, highlighted, all)",
            "in": "formData",
            "name": "state",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/mod/conversations": {
      "get": {
        "description": "Get conversations for a logged in user or subreddits",
        "parameters": [
          {
            "description": "base36 modmail conversation id",
            "in": "query",
            "name": "after",
            "type": "string"
          },
          {
            "description": "comma-delimited list of subreddit names",
            "in": "query",
            "name": "entity",
            "type": "string"
          },
          {
            "description": "an integer (default: 25)",
            "in": "query",
            "name": "limit",
            "type": "string"
          },
          {
            "description": "one of (recent, mod, user, unread)",
            "in": "query",
            "name": "sort",
            "type": "string"
          },
          {
            "description": "one of (new, inprogress, mod, notifications, archived, highlighted, all)",
            "in": "query",
            "name": "state",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      },
      "post": {
        "description": "Creates a new conversation for a particular SR\n\nThis endpoint will create a ModmailConversation object as\nwell as the first ModmailMessage within the ModmailConversation\nobject.",
        "parameters": [
          {
            "description": "raw markdown text",
            "in": "formData",
            "name": "body",
            "type": "string"
          },
          {
            "description": "boolean value",
            "in": "formData",
            "name": "isAuthorHidden",
            "type": "string"
          },
          {
            "description": "subreddit name",
            "in": "formData",
            "name": "srName",
            "type": "string"
          },
          {
            "description": "a string no longer than 100 characters",
            "in": "formData",
            "name": "subject",
            "type": "string"
          },
          {
            "description": "Modmail conversation recipient fullname",
            "in": "formData",
            "name": "to",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/mod/conversations/:conversation_id": {
      "get": {
        "description": "Returns all messages, mod actions and conversation metadata\nfor a given conversation id",
        "parameters": [
          {
            "description": "base36 modmail conversation id",
            "in": "query",
            "name": "conversation_id",
            "type": "string"
          },
          {
            "description": "boolean value",
            "in": "query",
            "name": "markRead",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      },
      "post": {
        "description": "Creates a new message for a particular conversation",
        "parameters": [
          {
            "description": "raw markdown text",
            "in": "formData",
            "name": "body",
            "type": "string"
          },
          {
            "description": "base36 modmail conversation id",
            "in": "formData",
            "name": "conversation_id",
            "type": "string"
          },
          {
            "description": "boolean value",
            "in": "formData",
            "name": "isAuthorHidden",
            "type": "string"
          },
          {
            "description": "boolean value",
            "in": "formData",
            "name": "isInternal",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/mod/conversations/:conversation_id/archive": {
      "post": {
        "description": "Marks a conversation as archived.",
        "parameters": [
          {
            "description": "base36 modmail conversation id",
            "in": "formData",
            "name": "conversation_id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/mod/conversations/:conversation_id/highlight": {
      "delete": {
        "description": "Removes a highlight from a conversation.",
        "parameters": [
          {
            "description": "base36 modmail conversation id",
            "in": "query",
            "name": "conversation_id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      },
      "post": {
        "description": "Marks a conversation as highlighted.",
        "parameters": [
          {
            "description": "base36 modmail conversation id",
            "in": "formData",
            "name": "conversation_id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/mod/conversations/:conversation_id/mute": {
      "post": {
        "description": "Mutes the non mod user associated with a particular conversation.",
        "parameters": [
          {
            "description": "base36 modmail conversation id",
            "in": "formData",
            "name": "conversation_id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/mod/conversations/:conversation_id/unarchive": {
      "post": {
        "description": "Marks conversation as unarchived.",
        "parameters": [
          {
            "description": "base36 modmail conversation id",
            "in": "formData",
            "name": "conversation_id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/mod/conversations/:conversation_id/unmute": {
      "post": {
        "description": "Unmutes the non mod user associated with\na particular conversation.",
        "parameters": [
          {
            "description": "base36 modmail conversation id",
            "in": "formData",
            "name": "conversation_id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/mod/conversations/:conversation_id/user": {
      "get": {
        "description": "Returns recent posts, comments and modmail conversations for a\ngiven user.",
        "parameters": [
          {
            "description": "base36 modmail conversation id",
            "in": "query",
            "name": "conversation_id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/mod/conversations/read": {
      "post": {
        "description": "Marks a conversations as read for the user.",
        "parameters": [
          {
            "description": "A comma-separated list of items",
            "in": "formData",
            "name": "conversationIds",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/mod/conversations/subreddits": {
      "get": {
        "description": "Returns a list of srs that the user moderates that are also\nenrolled in the new modmail",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/mod/conversations/unread": {
      "post": {
        "description": "Marks conversations as unread for the user.",
        "parameters": [
          {
            "description": "A comma-separated list of items",
            "in": "formData",
            "name": "conversationIds",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/mod/conversations/unread/count": {
      "get": {
        "description": "Endpoint to retrieve the unread conversation count by\nconversation state.",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/morechildren": {
      "get": {
        "description": "Retrieve additional comments omitted from a base comment tree.\n\nWhen a comment tree is rendered, the most relevant comments are\nselected for display first. Remaining comments are stubbed out with\n\"MoreComments\" links. This API call is used to retrieve the additional\ncomments represented by those stubs, up to 100 at a time.\n\nThe two core parameters required are link and children.  link is\nthe fullname of the link whose comments are being fetched. children\nis a comma-delimited list of comment ID36s that need to be fetched.\n\nIf id is passed, it should be the ID of the MoreComments object this\ncall is replacing. This is needed only for the HTML UI's purposes and\nis optional otherwise.\n\nNOTE: you may only make one request at a time to this API endpoint.\nHigher concurrency will result in an error being returned.\n\nIf limit_children is True, only return the children requested.",
        "parameters": [
          {
            "description": "the string json",
            "in": "query",
            "name": "api_type",
            "type": "string"
          },
          {
            "description": "a comma-delimited list of comment ID36s",
            "in": "query",
            "name": "children",
            "type": "string"
          },
          {
            "description": "(optional) id of the associated MoreChildren object",
            "in": "query",
            "name": "id",
            "type": "string"
          },
          {
            "description": "boolean value",
            "in": "query",
            "name": "limit_children",
            "type": "string"
          },
          {
            "description": "fullname of a link",
            "in": "query",
            "name": "link_id",
            "type": "string"
          },
          {
            "description": "one of (confidence, top, new, controversial, old, random, qa, live)",
            "in": "query",
            "name": "sort",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/multi/{multipath}": {
      "delete": {
        "description": "Delete a multi.",
        "parameters": [
          {
            "description": "boolean value",
            "in": "query",
            "name": "expand_srs",
            "type": "string"
          },
          {
            "description": "multireddit url path",
            "in": "path",
            "name": "multipath",
            "required": true,
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "query",
            "name": "uh",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      },
      "get": {
        "description": "Fetch a multi's data and subreddit list by name.",
        "parameters": [
          {
            "description": "boolean value",
            "in": "query",
            "name": "expand_srs",
            "type": "string"
          },
          {
            "description": "multireddit url path",
            "in": "path",
            "name": "multipath",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      },
      "post": {
        "description": "Create a multi. Responds with 409 Conflict if it already exists.",
        "parameters": [
          {
            "description": "boolean value",
            "in": "formData",
            "name": "expand_srs",
            "type": "string"
          },
          {
            "description": "json data:\n\n{\n  \"description_md\": raw markdown text,\n  \"display_name\": a string no longer than 50 characters,\n  \"icon_name\": one of (`art and design`, `ask`, `books`, `business`, `cars`, `comics`, `cute animals`, `diy`, `entertainment`, `food and drink`, `funny`, `games`, `grooming`, `health`, `life advice`, `military`, `models pinup`, `music`, `news`, `philosophy`, `pictures and gifs`, `science`, `shopping`, `sports`, `style`, `tech`, `travel`, `unusual stories`, `video`, ``, `None`),\n  \"key_color\": a 6-digit rgb hex color, e.g. `#AABBCC`,\n  \"subreddits\": [\n    {\n      \"name\": subreddit name,\n    },\n    ...\n  ],\n  \"visibility\": one of (`private`, `public`, `hidden`),\n  \"weighting_scheme\": one of (`classic`, `fresh`),\n}",
            "in": "formData",
            "name": "model",
            "type": "string"
          },
          {
            "description": "multireddit url path",
            "in": "path",
            "name": "multipath",
            "required": true,
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      },
      "put": {
        "description": "Create or update a multi.",
        "parameters": [
          {
            "description": "boolean value",
            "in": "formData",
            "name": "expand_srs",
            "type": "string"
          },
          {
            "description": "json data:\n\n{\n  \"description_md\": raw markdown text,\n  \"display_name\": a string no longer than 50 characters,\n  \"icon_name\": one of (`art and design`, `ask`, `books`, `business`, `cars`, `comics`, `cute animals`, `diy`, `entertainment`, `food and drink`, `funny`, `games`, `grooming`, `health`, `life advice`, `military`, `models pinup`, `music`, `news`, `philosophy`, `pictures and gifs`, `science`, `shopping`, `sports`, `style`, `tech`, `travel`, `unusual stories`, `video`, ``, `None`),\n  \"key_color\": a 6-digit rgb hex color, e.g. `#AABBCC`,\n  \"subreddits\": [\n    {\n      \"name\": subreddit name,\n    },\n    ...\n  ],\n  \"visibility\": one of (`private`, `public`, `hidden`),\n  \"weighting_scheme\": one of (`classic`, `fresh`),\n}",
            "in": "formData",
            "name": "model",
            "type": "string"
          },
          {
            "description": "multireddit url path",
            "in": "path",
            "name": "multipath",
            "required": true,
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/multi/{multipath}/description": {
      "get": {
        "description": "Get a multi's description.",
        "parameters": [
          {
            "description": "multireddit url path",
            "in": "path",
            "name": "multipath",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      },
      "put": {
        "description": "Change a multi's markdown description.",
        "parameters": [
          {
            "description": "json data:\n\n{\n  \"body_md\": raw markdown text,\n}",
            "in": "formData",
            "name": "model",
            "type": "string"
          },
          {
            "description": "multireddit url path",
            "in": "path",
            "name": "multipath",
            "required": true,
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/multi/{multipath}/r/{srname}": {
      "delete": {
        "description": "Remove a subreddit from a multi.",
        "parameters": [
          {
            "description": "multireddit url path",
            "in": "path",
            "name": "multipath",
            "required": true,
            "type": "string"
          },
          {
            "description": "subreddit name",
            "in": "path",
            "name": "srname",
            "required": true,
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "query",
            "name": "uh",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      },
      "get": {
        "description": "Get data about a subreddit in a multi.",
        "parameters": [
          {
            "description": "multireddit url path",
            "in": "path",
            "name": "multipath",
            "required": true,
            "type": "string"
          },
          {
            "description": "subreddit name",
            "in": "path",
            "name": "srname",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      },
      "put": {
        "description": "Add a subreddit to a multi.",
        "parameters": [
          {
            "description": "json data:\n\n{\n  \"name\": subreddit name,\n}",
            "in": "formData",
            "name": "model",
            "type": "string"
          },
          {
            "description": "multireddit url path",
            "in": "path",
            "name": "multipath",
            "required": true,
            "type": "string"
          },
          {
            "description": "subreddit name",
            "in": "path",
            "name": "srname",
            "required": true,
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/multi/copy": {
      "post": {
        "description": "Copy a multi.\n\nResponds with 409 Conflict if the target already exists.\n\nA \"copied from ...\" line will automatically be appended to the\ndescription.",
        "parameters": [
          {
            "description": "a string no longer than 50 characters",
            "in": "formData",
            "name": "display_name",
            "type": "string"
          },
          {
            "description": "multireddit url path",
            "in": "formData",
            "name": "from",
            "type": "string"
          },
          {
            "description": "destination multireddit url path",
            "in": "formData",
            "name": "to",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/multi/mine": {
      "get": {
        "description": "Fetch a list of multis belonging to the current user.",
        "parameters": [
          {
            "description": "boolean value",
            "in": "query",
            "name": "expand_srs",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/multi/rename": {
      "post": {
        "description": "Rename a multi.",
        "parameters": [
          {
            "description": "a string no longer than 50 characters",
            "in": "formData",
            "name": "display_name",
            "type": "string"
          },
          {
            "description": "multireddit url path",
            "in": "formData",
            "name": "from",
            "type": "string"
          },
          {
            "description": "destination multireddit url path",
            "in": "formData",
            "name": "to",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/multi/user/{username}": {
      "get": {
        "description": "Fetch a list of public multis belonging to username",
        "parameters": [
          {
            "description": "boolean value",
            "in": "query",
            "name": "expand_srs",
            "type": "string"
          },
          {
            "description": "A valid, existing reddit username",
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/mute_message_author": {
      "post": {
        "description": "For muting user via modmail.",
        "parameters": [
          {
            "description": "fullname of a thing",
            "in": "formData",
            "name": "id",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/needs_captcha": {
      "get": {
        "description": "Check whether ReCAPTCHAs are needed for API methods",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/read_all_messages": {
      "post": {
        "description": "Queue up marking all messages for a user as read.\n\nThis may take some time, and returns 202 to acknowledge acceptance of\nthe request.",
        "parameters": [
          {
            "description": "A comma-separated list of items",
            "in": "formData",
            "name": "filter_types",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/read_message": {
      "post": {
        "parameters": [
          {
            "description": "A comma-separated list of thing fullnames",
            "in": "formData",
            "name": "id",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/recommend/sr/{srnames}": {
      "get": {
        "description": "Return subreddits recommended for the given subreddit(s).\n\nGets a list of subreddits recommended for srnames, filtering out any\nthat appear in the optional omit param.",
        "parameters": [
          {
            "description": "comma-delimited list of subreddit names",
            "in": "query",
            "name": "omit",
            "type": "string"
          },
          {
            "description": "boolean value",
            "in": "query",
            "name": "over_18",
            "type": "string"
          },
          {
            "description": "comma-delimited list of subreddit names",
            "in": "path",
            "name": "srnames",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/remove": {
      "post": {
        "description": "Remove a link, comment, or modmail message.\n\nIf the thing is a link, it will be removed from all subreddit listings.\nIf the thing is a comment, it will be redacted and removed from all\nsubreddit comment listings.\n\nSee also: /api/approve.",
        "parameters": [
          {
            "description": "fullname of a thing",
            "in": "formData",
            "name": "id",
            "type": "string"
          },
          {
            "description": "boolean value",
            "in": "formData",
            "name": "spam",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/report": {
      "post": {
        "description": "Report a link, comment or message.\nReporting a thing brings it to the attention of the subreddit's\nmoderators. Reporting a message sends it to a system for admin review.\nFor links and comments, the thing is implicitly hidden as well (see\n/api/hide for details).",
        "parameters": [
          {
            "description": "a string no longer than 2000 characters",
            "in": "formData",
            "name": "additional_info",
            "type": "string"
          },
          {
            "description": "the string json",
            "in": "formData",
            "name": "api_type",
            "type": "string"
          },
          {
            "description": "a string no longer than 1000 characters",
            "in": "formData",
            "name": "ban_evading_accounts_names",
            "type": "string"
          },
          {
            "description": "a string no longer than 250 characters",
            "in": "formData",
            "name": "custom_text",
            "type": "string"
          },
          {
            "description": "boolean value",
            "in": "formData",
            "name": "from_help_center",
            "type": "string"
          },
          {
            "description": "a string no longer than 100 characters",
            "in": "formData",
            "name": "other_reason",
            "type": "string"
          },
          {
            "description": "a string no longer than 100 characters",
            "in": "formData",
            "name": "reason",
            "type": "string"
          },
          {
            "description": "a string no longer than 100 characters",
            "in": "formData",
            "name": "rule_reason",
            "type": "string"
          },
          {
            "description": "a string no longer than 100 characters",
            "in": "formData",
            "name": "site_reason",
            "type": "string"
          },
          {
            "description": "a string no longer than 1000 characters",
            "in": "formData",
            "name": "sr_name",
            "type": "string"
          },
          {
            "description": "fullname of a thing",
            "in": "formData",
            "name": "thing_id",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          },
          {
            "description": "the name of an existing user",
            "in": "formData",
            "name": "violator_username",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/report_user": {
      "post": {
        "description": "Report a user.\nReporting a user brings it to the attention of a Reddit admin.",
        "parameters": [
          {
            "description": "A valid, existing reddit username",
            "in": "formData",
            "name": "('user',)",
            "type": "string"
          },
          {
            "description": "JSON data",
            "in": "formData",
            "name": "details",
            "type": "string"
          },
          {
            "description": "a string no longer than 100 characters",
            "in": "formData",
            "name": "reason",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/save": {
      "post": {
        "description": "Save a link or comment.\n\nSaved things are kept in the user's saved listing for later perusal.\n\nSee also: /api/unsave.",
        "parameters": [
          {
            "description": "a category name",
            "in": "formData",
            "name": "category",
            "type": "string"
          },
          {
            "description": "fullname of a thing",
            "in": "formData",
            "name": "id",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/saved_categories": {
      "get": {
        "description": "Get a list of categories in which things are currently saved.\n\nSee also: /api/save.",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/saved_media_text": {
      "get": {
        "description": "Retrieve the advisory text about saving media for relevant media links.\n\nThis endpoint returns a notice for display during the post submission\nprocess that is pertinent to media links.",
        "parameters": [
          {
            "description": "a valid URL",
            "in": "query",
            "name": "url",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/search_reddit_names": {
      "get": {
        "description": "List subreddit names that begin with a query string.\n\nSubreddits whose names begin with query will be returned. If\ninclude_over_18 is false, subreddits with over-18 content\nrestrictions will be filtered from the results.\n\nIf include_unadvertisable is False, subreddits that have hide_ads\nset to True or are on the anti_ads_subreddits list will be filtered.\n\nIf exact is true, only an exact match will be returned. Exact matches\nare inclusive of over_18 subreddits, but not hide_ad subreddits\nwhen include_unadvertisable is False.",
        "parameters": [
          {
            "description": "boolean value",
            "in": "query",
            "name": "exact",
            "type": "string"
          },
          {
            "description": "boolean value",
            "in": "query",
            "name": "include_over_18",
            "type": "string"
          },
          {
            "description": "boolean value",
            "in": "query",
            "name": "include_unadvertisable",
            "type": "string"
          },
          {
            "description": "a string up to 50 characters long, consisting of printable characters.",
            "in": "query",
            "name": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      },
      "post": {
        "description": "List subreddit names that begin with a query string.\n\nSubreddits whose names begin with query will be returned. If\ninclude_over_18 is false, subreddits with over-18 content\nrestrictions will be filtered from the results.\n\nIf include_unadvertisable is False, subreddits that have hide_ads\nset to True or are on the anti_ads_subreddits list will be filtered.\n\nIf exact is true, only an exact match will be returned. Exact matches\nare inclusive of over_18 subreddits, but not hide_ad subreddits\nwhen include_unadvertisable is False.",
        "parameters": [
          {
            "description": "boolean value",
            "in": "formData",
            "name": "exact",
            "type": "string"
          },
          {
            "description": "boolean value",
            "in": "formData",
            "name": "include_over_18",
            "type": "string"
          },
          {
            "description": "boolean value",
            "in": "formData",
            "name": "include_unadvertisable",
            "type": "string"
          },
          {
            "description": "a string up to 50 characters long, consisting of printable characters.",
            "in": "formData",
            "name": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/search_subreddits": {
      "post": {
        "description": "List subreddits that begin with a query string.\n\nSubreddits whose names begin with query will be returned. If\ninclude_over_18 is false, subreddits with over-18 content\nrestrictions will be filtered from the results.\n\nIf include_unadvertisable is False, subreddits that have hide_ads\nset to True or are on the anti_ads_subreddits list will be filtered.\n\nIf exact is true, only an exact match will be returned. Exact matches\nare inclusive of over_18 subreddits, but not hide_ad subreddits\nwhen include_unadvertisable is False.",
        "parameters": [
          {
            "description": "boolean value",
            "in": "formData",
            "name": "exact",
            "type": "string"
          },
          {
            "description": "boolean value",
            "in": "formData",
            "name": "include_over_18",
            "type": "string"
          },
          {
            "description": "boolean value",
            "in": "formData",
            "name": "include_unadvertisable",
            "type": "string"
          },
          {
            "description": "a string up to 50 characters long, consisting of printable characters.",
            "in": "formData",
            "name": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/selectflair": {
      "post": {
        "parameters": [
          {
            "description": "the string json",
            "in": "formData",
            "name": "api_type",
            "type": "string"
          },
          {
            "description": "a 6-digit rgb hex color, e.g. #AABBCC",
            "in": "formData",
            "name": "background_color",
            "type": "string"
          },
          {
            "in": "formData",
            "name": "flair_template_id",
            "type": "string"
          },
          {
            "description": "a fullname of a link",
            "in": "formData",
            "name": "link",
            "type": "string"
          },
          {
            "description": "a user by name",
            "in": "formData",
            "name": "name",
            "type": "string"
          },
          {
            "description": "[all|only|none]: \"all\" saves attributes and returns rtjson \"only\" only returns rtjson\"none\" only saves attributes",
            "in": "formData",
            "name": "return_rtson",
            "type": "string"
          },
          {
            "description": "a string no longer than 64 characters",
            "in": "formData",
            "name": "text",
            "type": "string"
          },
          {
            "description": "one of (light, dark)",
            "in": "formData",
            "name": "text_color",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/sendreplies": {
      "post": {
        "description": "Enable or disable inbox replies for a link or comment.\n\nstate is a boolean that indicates whether you are enabling or\ndisabling inbox replies - true to enable, false to disable.",
        "parameters": [
          {
            "description": "fullname of a thing created by the user",
            "in": "formData",
            "name": "id",
            "type": "string"
          },
          {
            "description": "boolean value",
            "in": "formData",
            "name": "state",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/set_contest_mode": {
      "post": {
        "description": "Set or unset \"contest mode\" for a link's comments.\n\nstate is a boolean that indicates whether you are enabling or\ndisabling contest mode - true to enable, false to disable.",
        "parameters": [
          {
            "description": "the string json",
            "in": "formData",
            "name": "api_type",
            "type": "string"
          },
          {
            "in": "formData",
            "name": "id",
            "type": "string"
          },
          {
            "description": "boolean value",
            "in": "formData",
            "name": "state",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/set_subreddit_sticky": {
      "post": {
        "description": "Set or unset a Link as the sticky in its subreddit.\n\nstate is a boolean that indicates whether to sticky or unsticky\nthis post - true to sticky, false to unsticky.\n\nThe num argument is optional, and only used when stickying a post.\nIt allows specifying a particular \"slot\" to sticky the post into, and\nif there is already a post stickied in that slot it will be replaced.\nIf there is no post in the specified slot to replace, or num is None,\nthe bottom-most slot will be used.",
        "parameters": [
          {
            "description": "the string json",
            "in": "formData",
            "name": "api_type",
            "type": "string"
          },
          {
            "in": "formData",
            "name": "id",
            "type": "string"
          },
          {
            "description": "an integer between 1 and 4",
            "in": "formData",
            "name": "num",
            "type": "string"
          },
          {
            "description": "boolean value",
            "in": "formData",
            "name": "state",
            "type": "string"
          },
          {
            "description": "boolean value",
            "in": "formData",
            "name": "to_profile",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/set_suggested_sort": {
      "post": {
        "description": "Set a suggested sort for a link.\n\nSuggested sorts are useful to display comments in a certain preferred way\nfor posts. For example, casual conversation may be better sorted by new\nby default, or AMAs may be sorted by Q&A. A sort of an empty string\nclears the default sort.",
        "parameters": [
          {
            "description": "the string json",
            "in": "formData",
            "name": "api_type",
            "type": "string"
          },
          {
            "in": "formData",
            "name": "id",
            "type": "string"
          },
          {
            "description": "one of (confidence, top, new, controversial, old, random, qa, live, blank)",
            "in": "formData",
            "name": "sort",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/setflairenabled": {
      "post": {
        "parameters": [
          {
            "description": "the string json",
            "in": "formData",
            "name": "api_type",
            "type": "string"
          },
          {
            "description": "boolean value",
            "in": "formData",
            "name": "flair_enabled",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/setpermissions": {
      "post": {
        "parameters": [
          {
            "description": "the string json",
            "in": "formData",
            "name": "api_type",
            "type": "string"
          },
          {
            "description": "the name of an existing user",
            "in": "formData",
            "name": "name",
            "type": "string"
          },
          {
            "in": "formData",
            "name": "permissions",
            "type": "string"
          },
          {
            "in": "formData",
            "name": "type",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/site_admin": {
      "post": {
        "description": "Create or configure a subreddit.\n\nIf sr is specified, the request will attempt to modify the specified\nsubreddit. If not, a subreddit with name name will be created.\n\nThis endpoint expects all values to be supplied on every request.  If\nmodifying a subset of options, it may be useful to get the current\nsettings from /about/edit.json\nfirst.\n\nFor backwards compatibility, description is the sidebar text and\npublic_description is the publicly visible subreddit description.\n\nMost of the parameters for this endpoint are identical to options\nvisible in the user interface and their meanings are best explained\nthere.\n\nSee also: /about/edit.json.",
        "parameters": [
          {
            "description": "boolean value",
            "in": "formData",
            "name": "all_original_content",
            "type": "string"
          },
          {
            "description": "boolean value",
            "in": "formData",
            "name": "allow_discovery",
            "type": "string"
          },
          {
            "description": "boolean value",
            "in": "formData",
            "name": "allow_images",
            "type": "string"
          },
          {
            "description": "boolean value",
            "in": "formData",
            "name": "allow_post_crossposts",
            "type": "string"
          },
          {
            "description": "boolean value",
            "in": "formData",
            "name": "allow_top",
            "type": "string"
          },
          {
            "description": "boolean value",
            "in": "formData",
            "name": "allow_videos",
            "type": "string"
          },
          {
            "description": "the string json",
            "in": "formData",
            "name": "api_type",
            "type": "string"
          },
          {
            "description": "boolean value",
            "in": "formData",
            "name": "collapse_deleted_comments",
            "type": "string"
          },
          {
            "description": "an integer between 0 and 1440 (default: 0)",
            "in": "formData",
            "name": "comment_score_hide_mins",
            "type": "string"
          },
          {
            "description": "raw markdown text",
            "in": "formData",
            "name": "description",
            "type": "string"
          },
          {
            "description": "boolean value",
            "in": "formData",
            "name": "exclude_banned_modqueue",
            "type": "string"
          },
          {
            "description": "boolean value",
            "in": "formData",
            "name": "free_form_reports",
            "type": "string"
          },
          {
            "in": "formData",
            "name": "g-recaptcha-response",
            "type": "string"
          },
          {
            "description": "a string no longer than 500 characters",
            "in": "formData",
            "name": "header-title",
            "type": "string"
          },
          {
            "description": "boolean value",
            "in": "formData",
            "name": "hide_ads",
            "type": "string"
          },
          {
            "description": "a 6-digit rgb hex color, e.g. #AABBCC",
            "in": "formData",
            "name": "key_color",
            "type": "string"
          },
          {
            "description": "a valid IETF language tag (underscore separated)",
            "in": "formData",
            "name": "lang",
            "type": "string"
          },
          {
            "description": "one of (any, link, self)",
            "in": "formData",
            "name": "link_type",
            "type": "string"
          },
          {
            "description": "subreddit name",
            "in": "formData",
            "name": "name",
            "type": "string"
          },
          {
            "description": "boolean value",
            "in": "formData",
            "name": "original_content_tag_enabled",
            "type": "string"
          },
          {
            "description": "boolean value",
            "in": "formData",
            "name": "over_18",
            "type": "string"
          },
          {
            "description": "raw markdown text",
            "in": "formData",
            "name": "public_description",
            "type": "string"
          },
          {
            "description": "boolean value",
            "in": "formData",
            "name": "show_media",
            "type": "string"
          },
          {
            "description": "boolean value",
            "in": "formData",
            "name": "show_media_preview",
            "type": "string"
          },
          {
            "description": "one of (low, high, all)",
            "in": "formData",
            "name": "spam_comments",
            "type": "string"
          },
          {
            "description": "one of (low, high, all)",
            "in": "formData",
            "name": "spam_links",
            "type": "string"
          },
          {
            "description": "one of (low, high, all)",
            "in": "formData",
            "name": "spam_selfposts",
            "type": "string"
          },
          {
            "description": "boolean value",
            "in": "formData",
            "name": "spoilers_enabled",
            "type": "string"
          },
          {
            "description": "fullname of a thing",
            "in": "formData",
            "name": "sr",
            "type": "string"
          },
          {
            "description": "a string no longer than 60 characters",
            "in": "formData",
            "name": "submit_link_label",
            "type": "string"
          },
          {
            "description": "raw markdown text",
            "in": "formData",
            "name": "submit_text",
            "type": "string"
          },
          {
            "description": "a string no longer than 60 characters",
            "in": "formData",
            "name": "submit_text_label",
            "type": "string"
          },
          {
            "description": "one of (confidence, top, new, controversial, old, random, qa, live)",
            "in": "formData",
            "name": "suggested_comment_sort",
            "type": "string"
          },
          {
            "description": "subreddit name",
            "in": "formData",
            "name": "theme_sr",
            "type": "string"
          },
          {
            "description": "boolean value",
            "in": "formData",
            "name": "theme_sr_update",
            "type": "string"
          },
          {
            "description": "a string no longer than 100 characters",
            "in": "formData",
            "name": "title",
            "type": "string"
          },
          {
            "description": "one of (gold_restricted, archived, restricted, employees_only, gold_only, private, user, public)",
            "in": "formData",
            "name": "type",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          },
          {
            "description": "an integer between 0 and 36600 (default: 0)",
            "in": "formData",
            "name": "wiki_edit_age",
            "type": "string"
          },
          {
            "description": "an integer between 0 and 1000000000 (default: 0)",
            "in": "formData",
            "name": "wiki_edit_karma",
            "type": "string"
          },
          {
            "description": "one of (disabled, modonly, anyone)",
            "in": "formData",
            "name": "wikimode",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/spoiler": {
      "post": {
        "parameters": [
          {
            "description": "fullname of a link",
            "in": "formData",
            "name": "id",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/store_visits": {
      "post": {
        "description": "*Requires a subscription to [reddit premium]",
        "parameters": [
          {
            "description": "A comma-separated list of link fullnames",
            "in": "formData",
            "name": "links",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/submit": {
      "post": {
        "description": "Submit a link to a subreddit.\n\nSubmit will create a link or self-post in the subreddit sr with the\ntitle title. If kind is \"link\", then url is expected to be a\nvalid URL to link to. Otherwise, text, if present, will be the\nbody of the self-post unless richtext_json is present, in which case\nit will be converted into the body of the self-post. An error is thrown\nif both text and richtext_json are present.\n\nIf a link with the same URL has already been submitted to the specified\nsubreddit an error will be returned unless resubmit is true.\nextension is used for determining which view-type (e.g. json,\ncompact etc.) to use for the redirect that is generated if the\nresubmit error occurs.",
        "parameters": [
          {
            "description": "boolean value",
            "in": "formData",
            "name": "ad",
            "type": "string"
          },
          {
            "description": "the string json",
            "in": "formData",
            "name": "api_type",
            "type": "string"
          },
          {
            "in": "formData",
            "name": "app",
            "type": "string"
          },
          {
            "description": "extension used for redirects",
            "in": "formData",
            "name": "extension",
            "type": "string"
          },
          {
            "description": "a string no longer than 36 characters",
            "in": "formData",
            "name": "flair_id",
            "type": "string"
          },
          {
            "description": "a string no longer than 64 characters",
            "in": "formData",
            "name": "flair_text",
            "type": "string"
          },
          {
            "in": "formData",
            "name": "g-recaptcha-response",
            "type": "string"
          },
          {
            "description": "one of (link, self, image, video, videogif)",
            "in": "formData",
            "name": "kind",
            "type": "string"
          },
          {
            "description": "boolean value",
            "in": "formData",
            "name": "nsfw",
            "type": "string"
          },
          {
            "description": "boolean value",
            "in": "formData",
            "name": "resubmit",
            "type": "string"
          },
          {
            "description": "JSON data",
            "in": "formData",
            "name": "richtext_json",
            "type": "string"
          },
          {
            "description": "boolean value",
            "in": "formData",
            "name": "sendreplies",
            "type": "string"
          },
          {
            "description": "boolean value",
            "in": "formData",
            "name": "spoiler",
            "type": "string"
          },
          {
            "description": "name of a subreddit",
            "in": "formData",
            "name": "sr",
            "type": "string"
          },
          {
            "description": "raw markdown text",
            "in": "formData",
            "name": "text",
            "type": "string"
          },
          {
            "description": "title of the submission. up to 300 characters long",
            "in": "formData",
            "name": "title",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          },
          {
            "description": "a valid URL",
            "in": "formData",
            "name": "url",
            "type": "string"
          },
          {
            "description": "a valid URL",
            "in": "formData",
            "name": "video_poster_url",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/submit_text": {
      "get": {
        "description": "Get the submission text for the subreddit.\n\nThis text is set by the subreddit moderators and intended to be\ndisplayed on the submission form.\n\nSee also: /api/site_admin.",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/subreddit_autocomplete": {
      "get": {
        "description": "Return a list of subreddits and data for subreddits whose names start\nwith 'query'.\n\nUses typeahead endpoint to recieve the list of subreddits names.\nTypeahead provides exact matches, typo correction, fuzzy matching and\nboosts subreddits to the top that the user is subscribed to.",
        "parameters": [
          {
            "description": "boolean value",
            "in": "query",
            "name": "include_over_18",
            "type": "string"
          },
          {
            "description": "boolean value",
            "in": "query",
            "name": "include_profiles",
            "type": "string"
          },
          {
            "description": "a string up to 50 characters long, consisting of printable characters.",
            "in": "query",
            "name": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/subreddit_autocomplete_v2": {
      "get": {
        "parameters": [
          {
            "description": "boolean value",
            "in": "query",
            "name": "include_categories",
            "type": "string"
          },
          {
            "description": "boolean value",
            "in": "query",
            "name": "include_over_18",
            "type": "string"
          },
          {
            "description": "boolean value",
            "in": "query",
            "name": "include_profiles",
            "type": "string"
          },
          {
            "description": "an integer between 1 and 10 (default: 5)",
            "in": "query",
            "name": "limit",
            "type": "string"
          },
          {
            "description": "a string up to 50 characters long, consisting of printable characters.",
            "in": "query",
            "name": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/subscribe": {
      "post": {
        "description": "Subscribe to or unsubscribe from a subreddit.\n\nTo subscribe, action should be sub. To unsubscribe, action should\nbe unsub. The user must have access to the subreddit to be able to\nsubscribe to it.\n\nThe skip_initial_defaults param can be set to True to prevent\nautomatically subscribing the user to the current set of defaults\nwhen they take their first subscription action. Attempting to set it\nfor an unsubscribe action will result in an error.\n\nSee also: /subreddits/mine/.",
        "parameters": [
          {
            "description": "one of (sub, unsub)",
            "in": "formData",
            "name": "action",
            "type": "string"
          },
          {
            "description": "boolean value",
            "in": "formData",
            "name": "skip_initial_defaults",
            "type": "string"
          },
          {
            "description": "A comma-separated list of subreddit fullnames (when using the \"sr\" parameter), or of subreddit names (when using the \"sr_name\" parameter).",
            "in": "formData",
            "name": "sr",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/trending_subreddits": {
      "get": {
        "description": "Return a list of trending subreddits, link to the comment in\nr/trendingsubreddits, and the comment count of that link.",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/unblock_subreddit": {
      "post": {
        "parameters": [
          {
            "description": "fullname of a thing",
            "in": "formData",
            "name": "id",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/uncollapse_message": {
      "post": {
        "description": "Uncollapse a message\n\nSee also: /api/collapse_message",
        "parameters": [
          {
            "description": "A comma-separated list of thing fullnames",
            "in": "formData",
            "name": "id",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/unfriend": {
      "post": {
        "description": "Remove a relationship between a user and another user or subreddit\n\nThe user can either be passed in by name (nuser)\nor by fullname (iuser).  If type is friend or enemy,\n'container' MUST be the current user's fullname;\nfor other types, the subreddit must be set\nvia URL (e.g., /r/funny/api/unfriend)\n\nOAuth2 use requires appropriate scope based\non the 'type' of the relationship:\n\n\nmoderator: modothers\nmoderator_invite: modothers\ncontributor: modcontributors\nbanned: modcontributors\nmuted: modcontributors\nwikibanned: modcontributors and modwiki\nwikicontributor: modcontributors and modwiki\nfriend: Use /api/v1/me/friends/{username}\nenemy: privatemessages\n\n\nComplement to POST_friend",
        "parameters": [
          {
            "in": "formData",
            "name": "container",
            "type": "string"
          },
          {
            "description": "fullname of a thing",
            "in": "formData",
            "name": "id",
            "type": "string"
          },
          {
            "description": "the name of an existing user",
            "in": "formData",
            "name": "name",
            "type": "string"
          },
          {
            "description": "one of (friend, enemy, moderator, moderator_invite, contributor, banned, muted, wikibanned, wikicontributor)",
            "in": "formData",
            "name": "type",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/unhide": {
      "post": {
        "description": "Unhide a link.\n\nSee also: /api/hide.",
        "parameters": [
          {
            "description": "A comma-separated list of link fullnames",
            "in": "formData",
            "name": "id",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/unignore_reports": {
      "post": {
        "description": "Allow future reports on a thing to cause notifications.\n\nSee also: /api/ignore_reports.",
        "parameters": [
          {
            "description": "fullname of a thing",
            "in": "formData",
            "name": "id",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/unlock": {
      "post": {
        "description": "Unlock a link.\n\nAllow a post to receive new comments.\n\nSee also: /api/lock.",
        "parameters": [
          {
            "description": "fullname of a link",
            "in": "formData",
            "name": "id",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/unmarknsfw": {
      "post": {
        "description": "Remove the NSFW marking from a link.\n\nSee also: /api/marknsfw.",
        "parameters": [
          {
            "description": "fullname of a thing",
            "in": "formData",
            "name": "id",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/unmute_message_author": {
      "post": {
        "description": "For unmuting user via modmail.",
        "parameters": [
          {
            "description": "fullname of a thing",
            "in": "formData",
            "name": "id",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/unread_message": {
      "post": {
        "parameters": [
          {
            "description": "A comma-separated list of thing fullnames",
            "in": "formData",
            "name": "id",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/unsave": {
      "post": {
        "description": "Unsave a link or comment.\n\nThis removes the thing from the user's saved listings as well.\n\nSee also: /api/save.",
        "parameters": [
          {
            "description": "fullname of a thing",
            "in": "formData",
            "name": "id",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/unspoiler": {
      "post": {
        "parameters": [
          {
            "description": "fullname of a link",
            "in": "formData",
            "name": "id",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/upload_sr_img": {
      "post": {
        "description": "Add or replace a subreddit image, custom header logo, custom mobile\nicon, or custom mobile banner.\n\n\nIf the upload_type value is img, an image for use in the\nsubreddit stylesheet is uploaded with the name specified in name.\nIf the upload_type value is header then the image uploaded will\nbe the subreddit's new logo and name will be ignored.\nIf the upload_type value is icon then the image uploaded will be\nthe subreddit's new mobile icon and name will be ignored.\nIf the upload_type value is banner then the image uploaded will\nbe the subreddit's new mobile banner and name will be ignored.\n\n\nFor backwards compatibility, if upload_type is not specified, the\nheader field will be used instead:\n\n\nIf the header field has value 0, then upload_type is img.\nIf the header field has value 1, then upload_type is header.\n\n\nThe img_type field specifies whether to store the uploaded image as a\nPNG or JPEG.\n\nSubreddits have a limited number of images that can be in use at any\ngiven time. If no image with the specified name already exists, one of\nthe slots will be consumed.\n\nIf an image with the specified name already exists, it will be\nreplaced.  This does not affect the stylesheet immediately, but will\ntake effect the next time the stylesheet is saved.\n\nSee also: /api/delete_sr_img,\n/api/delete_sr_header,\n/api/delete_sr_icon, and\n/api/delete_sr_banner.",
        "parameters": [
          {
            "description": "file upload with maximum size of 500 KiB",
            "in": "formData",
            "name": "file",
            "type": "string"
          },
          {
            "description": "(optional) can be ignored",
            "in": "formData",
            "name": "formid",
            "type": "string"
          },
          {
            "description": "an integer between 0 and 1",
            "in": "formData",
            "name": "header",
            "type": "string"
          },
          {
            "description": "one of png or jpg (default: png)",
            "in": "formData",
            "name": "img_type",
            "type": "string"
          },
          {
            "description": "a valid subreddit image name",
            "in": "formData",
            "name": "name",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          },
          {
            "description": "one of (img, header, icon, banner)",
            "in": "formData",
            "name": "upload_type",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/user_data_by_account_ids": {
      "get": {
        "parameters": [
          {
            "description": "A comma-separated list of account fullnames",
            "in": "query",
            "name": "ids",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/user_flair": {
      "get": {
        "description": "Return list of available user flair for the current subreddit.\n\nWill not return flair if flair is disabled on the subreddit,\nthe user cannot set their own flair, or they are not a moderator\nthat can set flair.",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/user_flair_v2": {
      "get": {
        "description": "Return list of available user flair for the current subreddit.\n\nIf user is not a mod of the subreddit, this endpoint filters\nout mod_only templates.",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/username_available": {
      "get": {
        "description": "Check whether a username is available for registration.",
        "parameters": [
          {
            "description": "a valid, unused, username",
            "in": "query",
            "name": "user",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/{subreddit}/emoji_asset_upload_s3.json": {
      "post": {
        "description": "Acquire and return an upload lease to s3 temp bucket. The return value\nof this function is a json object containing credentials for uploading\nassets to S3 bucket, S3 url for upload request and the key to use for\nuploading. Using this lease the client will upload the emoji image to\nS3 temp bucket (included as part of the S3 URL).\n\nThis lease is used by S3 to verify that the upload is authorized.",
        "parameters": [
          {
            "description": "name and extension of the image file e.g. image1.png",
            "in": "formData",
            "name": "filepath",
            "type": "string"
          },
          {
            "description": "mime type of the image e.g. image/png",
            "in": "formData",
            "name": "mimetype",
            "type": "string"
          },
          {
            "in": "path",
            "name": "subreddit",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/{subreddit}/emoji_custom_size": {
      "post": {
        "description": "Set custom emoji size.\n\nOmitting width or height will disable custom emoji sizing.",
        "parameters": [
          {
            "description": "an integer between 1 and 40 (default: 0)",
            "in": "formData",
            "name": "height",
            "type": "string"
          },
          {
            "description": "an integer between 1 and 40 (default: 0)",
            "in": "formData",
            "name": "width",
            "type": "string"
          },
          {
            "in": "path",
            "name": "subreddit",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/{subreddit}/emoji.json": {
      "post": {
        "description": "Add an emoji to the DB by posting a message on emoji_upload_q.\nA job processor that listens on a queue, uses the s3_key provided\nin the request to locate the image in S3 Temp Bucket and moves it\nto the PERM bucket. It also adds it to the DB using name as the column\nand sr_fullname as the key and sends the status on the websocket URL\nthat is provided as part of this response.",
        "parameters": [
          {
            "description": "Name of the emoji to be created. It can be  alphanumeric without any special characters except '-' & '_' and cannot exceed 24 characters.",
            "in": "formData",
            "name": "name",
            "type": "string"
          },
          {
            "description": "S3 key of the uploaded image which can be obtained from the S3 url. This is of the form subreddit/hash_value.",
            "in": "formData",
            "name": "s3_key",
            "type": "string"
          },
          {
            "in": "path",
            "name": "subreddit",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/{subreddit}/emoji/{emoji_name}": {
      "delete": {
        "description": "Delete a Subreddit emoji.\nRemove the emoji from Cassandra and purge the assets from S3\nand the image resizing provider.",
        "parameters": [
          {
            "in": "path",
            "name": "subreddit",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "emoji_name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/{subreddit}/emojis/all": {
      "get": {
        "description": "Get all emojis for a SR. The response inclueds reddit emojis\nas well as emojis for the SR specified in the request.\n\nThe response has 2 keys:\n - Reddit emojis (snoomoji)\n - SR emojis",
        "parameters": [
          {
            "in": "path",
            "name": "subreddit",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/gold/gild/{fullname}": {
      "post": {
        "parameters": [
          {
            "description": "fullname of a thing",
            "in": "path",
            "name": "fullname",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/gold/give/{username}": {
      "post": {
        "parameters": [
          {
            "description": "an integer between 1 and 36",
            "in": "formData",
            "name": "months",
            "type": "string"
          },
          {
            "description": "A valid, existing reddit username",
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/me": {
      "get": {
        "description": "\"Returns the identity of the user.\n\nIf they are not authenticated via OAuth, then this will provide\nfeatures data based on the loid.",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/me/friends/{username}": {
      "delete": {
        "description": "Stop being friends with a user.",
        "parameters": [
          {
            "description": "A valid, existing reddit username",
            "in": "query",
            "name": "id",
            "type": "string"
          },
          {
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      },
      "get": {
        "description": "Get information about a specific 'friend', such as notes.",
        "parameters": [
          {
            "description": "A valid, existing reddit username",
            "in": "query",
            "name": "id",
            "type": "string"
          },
          {
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      },
      "put": {
        "description": "Create or update a \"friend\" relationship.\n\nThis operation is idempotent. It can be used to add a new\nfriend, or update an existing friend (e.g., add/change the\nnote on that friend)",
        "parameters": [
          {
            "description": "{\n  \"name\": A valid, existing reddit username,\n  \"note\": a string no longer than 300 characters,\n}",
            "in": "formData",
            "name": "This",
            "type": "string"
          },
          {
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/me/karma": {
      "get": {
        "description": "Return a breakdown of subreddit karma.",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/me/prefs": {
      "get": {
        "description": "Return the preference settings of the logged in user",
        "parameters": [
          {
            "description": "A comma-separated list of items from this set:\n\nthreaded_messages\nhide_downs\nactivity_relevant_ads\nshow_stylesheets\nprofile_opt_out\nvideo_autoplay\nthird_party_site_data_personalized_content\nshow_link_flair\ncreddit_autorenew\nshow_trending\nprivate_feeds\ntheme_selector\nmonitor_mentions\nresearch\nignore_suggested_sort\nemail_digests\nnum_comments\nclickgadget\nuse_global_defaults\nlabel_nsfw\ndomain_details\nemail_messages\nlive_orangereds\nhighlight_controversial\nno_profanity\nemail_unsubscribe_all\nlang\nin_redesign_beta\nhide_ups\nthird_party_data_personalized_ads\nallow_clicktracking\nhide_from_robots\nshow_twitter\ncompress\nstore_visits\nthreaded_modmail\nmin_link_score\nother_theme\nmedia_preview\nover_18\nnightmode\nenable_default_themes\ngeopopular\nthird_party_site_data_personalized_ads\nshow_promote\nmin_comment_score\npublic_votes\nno_video_autoplay\norganic\ncollapse_read_messages\nshow_flair\nmark_messages_read\nsearch_include_over_18\nhide_ads\nbeta\ntop_karma_subreddits\nnewwindow\nnumsites\nlegacy_search\nmedia\nshow_gold_expiration\nhighlight_new_comments\nautoplay\ndefault_comment_sort\nhide_locationbar\naccept_pms",
            "in": "query",
            "name": "fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      },
      "patch": {
        "parameters": [
          {
            "description": "{\n  \"accept_pms\": one of (`everyone`, `whitelisted`),\n  \"activity_relevant_ads\": boolean value,\n  \"allow_clicktracking\": boolean value,\n  \"autoplay\": boolean value,\n  \"beta\": boolean value,\n  \"clickgadget\": boolean value,\n  \"collapse_read_messages\": boolean value,\n  \"compress\": boolean value,\n  \"creddit_autorenew\": boolean value,\n  \"default_comment_sort\": one of (`confidence`, `top`, `new`, `controversial`, `old`, `random`, `qa`, `live`),\n  \"domain_details\": boolean value,\n  \"email_digests\": boolean value,\n  \"email_messages\": boolean value,\n  \"email_unsubscribe_all\": boolean value,\n  \"enable_default_themes\": boolean value,\n  \"g\": one of (`GLOBAL`, `US`, `AR`, `AU`, `BG`, `CA`, `CL`, `CO`, `HR`, `CZ`, `FI`, `GR`, `HU`, `IS`, `IN`, `IE`, `JP`, `MY`, `MX`, `NZ`, `PH`, `PL`, `PT`, `PR`, `RO`, `RS`, `SG`, `SE`, `TW`, `TH`, `TR`, `GB`, `US_WA`, `US_DE`, `US_DC`, `US_WI`, `US_WV`, `US_HI`, `US_FL`, `US_WY`, `US_NH`, `US_NJ`, `US_NM`, `US_TX`, `US_LA`, `US_NC`, `US_ND`, `US_NE`, `US_TN`, `US_NY`, `US_PA`, `US_CA`, `US_NV`, `US_VA`, `US_CO`, `US_AK`, `US_AL`, `US_AR`, `US_VT`, `US_IL`, `US_GA`, `US_IN`, `US_IA`, `US_OK`, `US_AZ`, `US_ID`, `US_CT`, `US_ME`, `US_MD`, `US_MA`, `US_OH`, `US_UT`, `US_MO`, `US_MN`, `US_MI`, `US_RI`, `US_KS`, `US_MT`, `US_MS`, `US_SC`, `US_KY`, `US_OR`, `US_SD`),\n  \"hide_ads\": boolean value,\n  \"hide_downs\": boolean value,\n  \"hide_from_robots\": boolean value,\n  \"hide_locationbar\": boolean value,\n  \"hide_ups\": boolean value,\n  \"highlight_controversial\": boolean value,\n  \"highlight_new_comments\": boolean value,\n  \"ignore_suggested_sort\": boolean value,\n  \"in_redesign_beta\": boolean value,\n  \"label_nsfw\": boolean value,\n  \"lang\": a valid IETF language tag (underscore separated),\n  \"legacy_search\": boolean value,\n  \"live_orangereds\": boolean value,\n  \"mark_messages_read\": boolean value,\n  \"media\": one of (`on`, `off`, `subreddit`),\n  \"media_preview\": one of (`on`, `off`, `subreddit`),\n  \"min_comment_score\": an integer between -100 and 100,\n  \"min_link_score\": an integer between -100 and 100,\n  \"monitor_mentions\": boolean value,\n  \"newwindow\": boolean value,\n  \"nightmode\": boolean value,\n  \"no_profanity\": boolean value,\n  \"no_video_autoplay\": boolean value,\n  \"num_comments\": an integer between 1 and 500,\n  \"numsites\": an integer between 1 and 100,\n  \"organic\": boolean value,\n  \"other_theme\": subreddit name,\n  \"over_18\": boolean value,\n  \"private_feeds\": boolean value,\n  \"profile_opt_out\": boolean value,\n  \"public_votes\": boolean value,\n  \"research\": boolean value,\n  \"search_include_over_18\": boolean value,\n  \"show_flair\": boolean value,\n  \"show_gold_expiration\": boolean value,\n  \"show_link_flair\": boolean value,\n  \"show_promote\": boolean value,\n  \"show_stylesheets\": boolean value,\n  \"show_trending\": boolean value,\n  \"show_twitter\": boolean value,\n  \"store_visits\": boolean value,\n  \"theme_selector\": subreddit name,\n  \"third_party_data_personalized_ads\": boolean value,\n  \"third_party_site_data_personalized_ads\": boolean value,\n  \"third_party_site_data_personalized_content\": boolean value,\n  \"threaded_messages\": boolean value,\n  \"threaded_modmail\": boolean value,\n  \"top_karma_subreddits\": boolean value,\n  \"use_global_defaults\": boolean value,\n  \"video_autoplay\": boolean value,\n}",
            "in": "formData",
            "name": "This",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/me/trophies": {
      "get": {
        "description": "Return a list of trophies for the current user.",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/scopes": {
      "get": {
        "description": "Retrieve descriptions of reddit's OAuth2 scopes.\n\nIf no scopes are given, information on all scopes are returned.\n\nInvalid scope(s) will result in a 400 error with body that indicates\nthe invalid scope(s).",
        "parameters": [
          {
            "description": "(optional) An OAuth2 scope string",
            "in": "query",
            "name": "scopes",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/user/{username}/trophies": {
      "get": {
        "description": "Return a list of trophies for the a given user.",
        "parameters": [
          {
            "description": "A valid, existing reddit username",
            "in": "query",
            "name": "id",
            "type": "string"
          },
          {
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/vote": {
      "post": {
        "description": "Cast a vote on a thing.\n\nid should be the fullname of the Link or Comment to vote on.\n\ndir indicates the direction of the vote. Voting 1 is an upvote,\n-1 is a downvote, and 0 is equivalent to \"un-voting\" by clicking\nagain on a highlighted arrow.\n\nNote: votes must be cast by humans. That is, API clients proxying a\nhuman's action one-for-one are OK, but bots deciding how to vote on\ncontent or amplifying a human's vote are not. See the reddit\nrules for more details on what constitutes vote cheating.",
        "parameters": [
          {
            "description": "vote direction. one of (1, 0, -1)",
            "in": "formData",
            "name": "dir",
            "type": "string"
          },
          {
            "description": "fullname of a thing",
            "in": "formData",
            "name": "id",
            "type": "string"
          },
          {
            "description": "an integer greater than 1",
            "in": "formData",
            "name": "rank",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/widget": {
      "post": {
        "description": "Add and return a widget to the specified subreddit\n\nAccepts a JSON payload representing the widget data to be saved.\nValid payloads differ in shape based on the \"kind\" attribute passed on\nthe root object, which must be a valid widget kind.",
        "parameters": [
          {
            "description": "json data:\n\n{\n  \"data\": [\n    {\n      \"height\": an integer,\n      \"linkUrl\": A valid URL (optional),\n      \"url\": a valid URL of a reddit-hosted image,\n      \"width\": an integer,\n    },\n    ...\n  ],\n  \"kind\": one of (`image`),\n  \"shortName\": a string no longer than 30 characters,\n  \"styles\": {\n    \"backgroundColor\": a 6-digit rgb hex color, e.g. `#AABBCC`,\n    \"headerColor\": a 6-digit rgb hex color, e.g. `#AABBCC`,\n  },\n}\n\nOR\n\n{\n  \"configuration\": {\n    \"numEvents\": an integer between 1 and 50 (default: 10),\n    \"showDate\": boolean value,\n    \"showDescription\": boolean value,\n    \"showLocation\": boolean value,\n    \"showTime\": boolean value,\n    \"showTitle\": boolean value,\n  },\n  \"googleCalendarId\": a valid email address,\n  \"kind\": one of (`calendar`),\n  \"requiresSync\": boolean value,\n  \"shortName\": a string no longer than 30 characters,\n  \"styles\": {\n    \"backgroundColor\": a 6-digit rgb hex color, e.g. `#AABBCC`,\n    \"headerColor\": a 6-digit rgb hex color, e.g. `#AABBCC`,\n  },\n}\n\nOR\n\n{\n  \"kind\": one of (`textarea`),\n  \"shortName\": a string no longer than 30 characters,\n  \"styles\": {\n    \"backgroundColor\": a 6-digit rgb hex color, e.g. `#AABBCC`,\n    \"headerColor\": a 6-digit rgb hex color, e.g. `#AABBCC`,\n  },\n  \"text\": raw markdown text,\n}\n\nOR\n\n{\n  \"data\": [\n    {\n      \"text\": a string no longer than 20 characters,\n      \"url\": a valid URL,\n    }\n\n    OR\n\n    {\n      \"children\": [\n        {\n          \"text\": a string no longer than 20 characters,\n          \"url\": a valid URL,\n        },\n        ...\n      ],\n      \"text\": a string no longer than 20 characters,\n    },\n    ...\n  ],\n  \"kind\": one of (`menu`),\n}\n\nOR\n\n{\n  \"buttons\": [\n    {\n      \"color\": a 6-digit rgb hex color, e.g. `#AABBCC`,\n      \"fillColor\": a 6-digit rgb hex color, e.g. `#AABBCC`,\n      \"hoverState\": {\n        \"color\": a 6-digit rgb hex color, e.g. `#AABBCC`,\n        \"fillColor\": a 6-digit rgb hex color, e.g. `#AABBCC`,\n        \"kind\": one of (`text`),\n        \"text\": a string no longer than 30 characters,\n        \"textColor\": a 6-digit rgb hex color, e.g. `#AABBCC`,\n      }\n\n      OR\n\n      {\n        \"height\": an integer,\n        \"imageUrl\": a valid URL of a reddit-hosted image,\n        \"kind\": one of (`image`),\n        \"width\": an integer,\n      },\n      \"kind\": one of (`text`),\n      \"text\": a string no longer than 30 characters,\n      \"textColor\": a 6-digit rgb hex color, e.g. `#AABBCC`,\n      \"url\": a valid URL,\n    }\n\n    OR\n\n    {\n      \"height\": an integer,\n      \"hoverState\": {\n        \"color\": a 6-digit rgb hex color, e.g. `#AABBCC`,\n        \"fillColor\": a 6-digit rgb hex color, e.g. `#AABBCC`,\n        \"kind\": one of (`text`),\n        \"text\": a string no longer than 30 characters,\n        \"textColor\": a 6-digit rgb hex color, e.g. `#AABBCC`,\n      }\n\n      OR\n\n      {\n        \"height\": an integer,\n        \"imageUrl\": a valid URL of a reddit-hosted image,\n        \"kind\": one of (`image`),\n        \"width\": an integer,\n      },\n      \"imageUrl\": a valid URL of a reddit-hosted image,\n      \"kind\": one of (`image`),\n      \"linkUrl\": a valid URL,\n      \"text\": a string no longer than 30 characters,\n      \"width\": an integer,\n    },\n    ...\n  ],\n  \"description\": raw markdown text,\n  \"kind\": one of (`button`),\n  \"shortName\": a string no longer than 30 characters,\n  \"styles\": {\n    \"backgroundColor\": a 6-digit rgb hex color, e.g. `#AABBCC`,\n    \"headerColor\": a 6-digit rgb hex color, e.g. `#AABBCC`,\n  },\n}\n\nOR\n\n{\n  \"data\": [\n    subreddit name,\n    ...\n  ],\n  \"kind\": one of (`community-list`),\n  \"shortName\": a string no longer than 30 characters,\n  \"styles\": {\n    \"backgroundColor\": a 6-digit rgb hex color, e.g. `#AABBCC`,\n    \"headerColor\": a 6-digit rgb hex color, e.g. `#AABBCC`,\n  },\n}\n\nOR\n\n{\n  \"css\": a string no longer than 100000 characters,\n  \"height\": an integer between 50 and 500,\n  \"imageData\": [\n    {\n      \"height\": an integer,\n      \"name\": a string no longer than 20 characters,\n      \"url\": a valid URL of a reddit-hosted image,\n      \"width\": an integer,\n    },\n    ...\n  ],\n  \"kind\": one of (`custom`),\n  \"shortName\": a string no longer than 30 characters,\n  \"styles\": {\n    \"backgroundColor\": a 6-digit rgb hex color, e.g. `#AABBCC`,\n    \"headerColor\": a 6-digit rgb hex color, e.g. `#AABBCC`,\n  },\n  \"text\": raw markdown text,\n}\n\nOR\n\n{\n  \"display\": one of (`cloud`, `list`),\n  \"kind\": one of (`post-flair`),\n  \"order\": [\n    a flair template ID,\n    ...\n  ],\n  \"shortName\": a string no longer than 30 characters,\n  \"styles\": {\n    \"backgroundColor\": a 6-digit rgb hex color, e.g. `#AABBCC`,\n    \"headerColor\": a 6-digit rgb hex color, e.g. `#AABBCC`,\n  },\n}",
            "in": "formData",
            "name": "json",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/widget_image_upload_s3": {
      "post": {
        "description": "Acquire and return an upload lease to s3 temp bucket.\n\nThe return value of this function is a json object containing\ncredentials for uploading assets to S3 bucket, S3 url for upload\nrequest and the key to use for uploading. Using this lease the client\nwill upload the emoji image to S3 temp bucket (included as part of\nthe S3 URL).\n\nThis lease is used by S3 to verify that the upload is authorized.",
        "parameters": [
          {
            "description": "name and extension of the image file e.g. image1.png",
            "in": "formData",
            "name": "filepath",
            "type": "string"
          },
          {
            "description": "mime type of the image e.g. image/png",
            "in": "formData",
            "name": "mimetype",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/widget_order/{section}": {
      "patch": {
        "description": "Update the order of widget_ids in the specified subreddit",
        "parameters": [
          {
            "description": "json data:\n\n[\n  a string,\n  ...\n]",
            "in": "formData",
            "name": "json",
            "type": "string"
          },
          {
            "description": "one of (sidebar)",
            "in": "path",
            "name": "section",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/widget/{widget_id}": {
      "delete": {
        "description": "Delete a widget from the specified subreddit (if it exists)",
        "parameters": [
          {
            "description": "id of an existing widget",
            "in": "path",
            "name": "widget_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      },
      "put": {
        "description": "Update and return the data of a widget.\n\nAccepts a JSON payload representing the widget data to be saved.\nValid payloads differ in shape based on the \"kind\" attribute passed on\nthe root object, which must be a valid widget kind.",
        "parameters": [
          {
            "description": "json data:\n\n{\n  \"data\": [\n    {\n      \"height\": an integer,\n      \"linkUrl\": A valid URL (optional),\n      \"url\": a valid URL of a reddit-hosted image,\n      \"width\": an integer,\n    },\n    ...\n  ],\n  \"kind\": one of (`image`),\n  \"shortName\": a string no longer than 30 characters,\n  \"styles\": {\n    \"backgroundColor\": a 6-digit rgb hex color, e.g. `#AABBCC`,\n    \"headerColor\": a 6-digit rgb hex color, e.g. `#AABBCC`,\n  },\n}\n\nOR\n\n{\n  \"configuration\": {\n    \"numEvents\": an integer between 1 and 50 (default: 10),\n    \"showDate\": boolean value,\n    \"showDescription\": boolean value,\n    \"showLocation\": boolean value,\n    \"showTime\": boolean value,\n    \"showTitle\": boolean value,\n  },\n  \"googleCalendarId\": a valid email address,\n  \"kind\": one of (`calendar`),\n  \"requiresSync\": boolean value,\n  \"shortName\": a string no longer than 30 characters,\n  \"styles\": {\n    \"backgroundColor\": a 6-digit rgb hex color, e.g. `#AABBCC`,\n    \"headerColor\": a 6-digit rgb hex color, e.g. `#AABBCC`,\n  },\n}\n\nOR\n\n{\n  \"kind\": one of (`textarea`),\n  \"shortName\": a string no longer than 30 characters,\n  \"styles\": {\n    \"backgroundColor\": a 6-digit rgb hex color, e.g. `#AABBCC`,\n    \"headerColor\": a 6-digit rgb hex color, e.g. `#AABBCC`,\n  },\n  \"text\": raw markdown text,\n}\n\nOR\n\n{\n  \"display\": one of (`full`, `compact`),\n  \"kind\": one of (`subreddit-rules`),\n  \"shortName\": a string no longer than 30 characters,\n  \"styles\": {\n    \"backgroundColor\": a 6-digit rgb hex color, e.g. `#AABBCC`,\n    \"headerColor\": a 6-digit rgb hex color, e.g. `#AABBCC`,\n  },\n}\n\nOR\n\n{\n  \"data\": [\n    {\n      \"text\": a string no longer than 20 characters,\n      \"url\": a valid URL,\n    }\n\n    OR\n\n    {\n      \"children\": [\n        {\n          \"text\": a string no longer than 20 characters,\n          \"url\": a valid URL,\n        },\n        ...\n      ],\n      \"text\": a string no longer than 20 characters,\n    },\n    ...\n  ],\n  \"kind\": one of (`menu`),\n}\n\nOR\n\n{\n  \"buttons\": [\n    {\n      \"color\": a 6-digit rgb hex color, e.g. `#AABBCC`,\n      \"fillColor\": a 6-digit rgb hex color, e.g. `#AABBCC`,\n      \"hoverState\": {\n        \"color\": a 6-digit rgb hex color, e.g. `#AABBCC`,\n        \"fillColor\": a 6-digit rgb hex color, e.g. `#AABBCC`,\n        \"kind\": one of (`text`),\n        \"text\": a string no longer than 30 characters,\n        \"textColor\": a 6-digit rgb hex color, e.g. `#AABBCC`,\n      }\n\n      OR\n\n      {\n        \"height\": an integer,\n        \"imageUrl\": a valid URL of a reddit-hosted image,\n        \"kind\": one of (`image`),\n        \"width\": an integer,\n      },\n      \"kind\": one of (`text`),\n      \"text\": a string no longer than 30 characters,\n      \"textColor\": a 6-digit rgb hex color, e.g. `#AABBCC`,\n      \"url\": a valid URL,\n    }\n\n    OR\n\n    {\n      \"height\": an integer,\n      \"hoverState\": {\n        \"color\": a 6-digit rgb hex color, e.g. `#AABBCC`,\n        \"fillColor\": a 6-digit rgb hex color, e.g. `#AABBCC`,\n        \"kind\": one of (`text`),\n        \"text\": a string no longer than 30 characters,\n        \"textColor\": a 6-digit rgb hex color, e.g. `#AABBCC`,\n      }\n\n      OR\n\n      {\n        \"height\": an integer,\n        \"imageUrl\": a valid URL of a reddit-hosted image,\n        \"kind\": one of (`image`),\n        \"width\": an integer,\n      },\n      \"imageUrl\": a valid URL of a reddit-hosted image,\n      \"kind\": one of (`image`),\n      \"linkUrl\": a valid URL,\n      \"text\": a string no longer than 30 characters,\n      \"width\": an integer,\n    },\n    ...\n  ],\n  \"description\": raw markdown text,\n  \"kind\": one of (`button`),\n  \"shortName\": a string no longer than 30 characters,\n  \"styles\": {\n    \"backgroundColor\": a 6-digit rgb hex color, e.g. `#AABBCC`,\n    \"headerColor\": a 6-digit rgb hex color, e.g. `#AABBCC`,\n  },\n}\n\nOR\n\n{\n  \"currentlyViewingText\": a string no longer than 30 characters,\n  \"kind\": one of (`id-card`),\n  \"shortName\": a string no longer than 30 characters,\n  \"styles\": {\n    \"backgroundColor\": a 6-digit rgb hex color, e.g. `#AABBCC`,\n    \"headerColor\": a 6-digit rgb hex color, e.g. `#AABBCC`,\n  },\n  \"subscribersText\": a string no longer than 30 characters,\n}\n\nOR\n\n{\n  \"data\": [\n    subreddit name,\n    ...\n  ],\n  \"kind\": one of (`community-list`),\n  \"shortName\": a string no longer than 30 characters,\n  \"styles\": {\n    \"backgroundColor\": a 6-digit rgb hex color, e.g. `#AABBCC`,\n    \"headerColor\": a 6-digit rgb hex color, e.g. `#AABBCC`,\n  },\n}\n\nOR\n\n{\n  \"css\": a string no longer than 100000 characters,\n  \"height\": an integer between 50 and 500,\n  \"imageData\": [\n    {\n      \"height\": an integer,\n      \"name\": a string no longer than 20 characters,\n      \"url\": a valid URL of a reddit-hosted image,\n      \"width\": an integer,\n    },\n    ...\n  ],\n  \"kind\": one of (`custom`),\n  \"shortName\": a string no longer than 30 characters,\n  \"styles\": {\n    \"backgroundColor\": a 6-digit rgb hex color, e.g. `#AABBCC`,\n    \"headerColor\": a 6-digit rgb hex color, e.g. `#AABBCC`,\n  },\n  \"text\": raw markdown text,\n}\n\nOR\n\n{\n  \"display\": one of (`cloud`, `list`),\n  \"kind\": one of (`post-flair`),\n  \"order\": [\n    a flair template ID,\n    ...\n  ],\n  \"shortName\": a string no longer than 30 characters,\n  \"styles\": {\n    \"backgroundColor\": a 6-digit rgb hex color, e.g. `#AABBCC`,\n    \"headerColor\": a 6-digit rgb hex color, e.g. `#AABBCC`,\n  },\n}\n\nOR\n\n{\n  \"kind\": one of (`moderators`),\n  \"styles\": {\n    \"backgroundColor\": a 6-digit rgb hex color, e.g. `#AABBCC`,\n    \"headerColor\": a 6-digit rgb hex color, e.g. `#AABBCC`,\n  },\n}",
            "in": "formData",
            "name": "json",
            "type": "string"
          },
          {
            "description": "a valid widget id",
            "in": "path",
            "name": "widget_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/widgets": {
      "get": {
        "description": "Return all widgets for the given subreddit",
        "parameters": [
          {
            "description": "boolean value",
            "in": "query",
            "name": "progressive_images",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/wiki/alloweditor/{act}": {
      "post": {
        "description": "Allow/deny username to edit this wiki page",
        "parameters": [
          {
            "description": "one of (del, add)",
            "in": "path",
            "name": "act",
            "required": true,
            "type": "string"
          },
          {
            "description": "the name of an existing wiki page",
            "in": "formData",
            "name": "page",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          },
          {
            "description": "the name of an existing user",
            "in": "formData",
            "name": "username",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/wiki/edit": {
      "post": {
        "description": "Edit a wiki page",
        "parameters": [
          {
            "in": "formData",
            "name": "content",
            "type": "string"
          },
          {
            "description": "the name of an existing page or a new page to create",
            "in": "formData",
            "name": "page",
            "type": "string"
          },
          {
            "description": "the starting point revision for this edit",
            "in": "formData",
            "name": "previous",
            "type": "string"
          },
          {
            "description": "a string up to 256 characters long, consisting of printable characters.",
            "in": "formData",
            "name": "reason",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/wiki/hide": {
      "post": {
        "description": "Toggle the public visibility of a wiki page revision",
        "parameters": [
          {
            "description": "the name of an existing wiki page",
            "in": "formData",
            "name": "page",
            "type": "string"
          },
          {
            "description": "a wiki revision ID",
            "in": "formData",
            "name": "revision",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/wiki/revert": {
      "post": {
        "description": "Revert a wiki page to revision",
        "parameters": [
          {
            "description": "the name of an existing wiki page",
            "in": "formData",
            "name": "page",
            "type": "string"
          },
          {
            "description": "a wiki revision ID",
            "in": "formData",
            "name": "revision",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/best": {
      "get": {
        "description": "This endpoint is a listing.",
        "parameters": [
          {
            "description": "fullname of a thing",
            "in": "query",
            "name": "after",
            "type": "string"
          },
          {
            "description": "fullname of a thing",
            "in": "query",
            "name": "before",
            "type": "string"
          },
          {
            "description": "a positive integer (default: 0)",
            "in": "query",
            "name": "count",
            "type": "string"
          },
          {
            "description": "boolean value",
            "in": "query",
            "name": "include_categories",
            "type": "string"
          },
          {
            "description": "the maximum number of items desired (default: 25, maximum: 100)",
            "in": "query",
            "name": "limit",
            "type": "string"
          },
          {
            "description": "(optional) the string all",
            "in": "query",
            "name": "show",
            "type": "string"
          },
          {
            "description": "(optional) expand subreddits",
            "in": "query",
            "name": "sr_detail",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/by_id/{names}": {
      "get": {
        "description": "Get a listing of links by fullname.\n\nnames is a list of fullnames for links separated by commas or spaces.",
        "parameters": [
          {
            "description": "A comma-separated list of link fullnames",
            "in": "path",
            "name": "names",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/comments/{article}": {
      "get": {
        "description": "Get the comment tree for a given Link article.\n\nIf supplied, comment is the ID36 of a comment in the comment tree for\narticle. This comment will be the (highlighted) focal point of the\nreturned view and context will be the number of parents shown.\n\ndepth is the maximum depth of subtrees in the thread.\n\nlimit is the maximum number of comments to return.\n\nSee also: /api/morechildren and\n/api/comment.",
        "parameters": [
          {
            "description": "ID36 of a link",
            "in": "path",
            "name": "article",
            "required": true,
            "type": "string"
          },
          {
            "description": "(optional) ID36 of a comment",
            "in": "query",
            "name": "comment",
            "type": "string"
          },
          {
            "description": "an integer between 0 and 8",
            "in": "query",
            "name": "context",
            "type": "string"
          },
          {
            "description": "(optional) an integer",
            "in": "query",
            "name": "depth",
            "type": "string"
          },
          {
            "description": "(optional) an integer",
            "in": "query",
            "name": "limit",
            "type": "string"
          },
          {
            "description": "boolean value",
            "in": "query",
            "name": "showedits",
            "type": "string"
          },
          {
            "description": "boolean value",
            "in": "query",
            "name": "showmore",
            "type": "string"
          },
          {
            "description": "one of (confidence, top, new, controversial, old, random, qa, live)",
            "in": "query",
            "name": "sort",
            "type": "string"
          },
          {
            "description": "(optional) expand subreddits",
            "in": "query",
            "name": "sr_detail",
            "type": "string"
          },
          {
            "description": "boolean value",
            "in": "query",
            "name": "threaded",
            "type": "string"
          },
          {
            "description": "an integer between 0 and 50",
            "in": "query",
            "name": "truncate",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/duplicates/{article}": {
      "get": {
        "description": "Return a list of other submissions of the same URL\n\nThis endpoint is a listing.",
        "parameters": [
          {
            "description": "fullname of a thing",
            "in": "query",
            "name": "after",
            "type": "string"
          },
          {
            "description": "The base 36 ID of a Link",
            "in": "path",
            "name": "article",
            "required": true,
            "type": "string"
          },
          {
            "description": "fullname of a thing",
            "in": "query",
            "name": "before",
            "type": "string"
          },
          {
            "description": "a positive integer (default: 0)",
            "in": "query",
            "name": "count",
            "type": "string"
          },
          {
            "description": "boolean value",
            "in": "query",
            "name": "crossposts_only",
            "type": "string"
          },
          {
            "description": "the maximum number of items desired (default: 25, maximum: 100)",
            "in": "query",
            "name": "limit",
            "type": "string"
          },
          {
            "description": "(optional) the string all",
            "in": "query",
            "name": "show",
            "type": "string"
          },
          {
            "description": "one of (num_comments, new)",
            "in": "query",
            "name": "sort",
            "type": "string"
          },
          {
            "description": "subreddit name",
            "in": "query",
            "name": "sr",
            "type": "string"
          },
          {
            "description": "(optional) expand subreddits",
            "in": "query",
            "name": "sr_detail",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/hot": {
      "get": {
        "description": "This endpoint is a listing.",
        "parameters": [
          {
            "description": "fullname of a thing",
            "in": "query",
            "name": "after",
            "type": "string"
          },
          {
            "description": "fullname of a thing",
            "in": "query",
            "name": "before",
            "type": "string"
          },
          {
            "description": "a positive integer (default: 0)",
            "in": "query",
            "name": "count",
            "type": "string"
          },
          {
            "description": "one of (GLOBAL, US, AR, AU, BG, CA, CL, CO, HR, CZ, FI, GR, HU, IS, IN, IE, JP, MY, MX, NZ, PH, PL, PT, PR, RO, RS, SG, SE, TW, TH, TR, GB, US_WA, US_DE, US_DC, US_WI, US_WV, US_HI, US_FL, US_WY, US_NH, US_NJ, US_NM, US_TX, US_LA, US_NC, US_ND, US_NE, US_TN, US_NY, US_PA, US_CA, US_NV, US_VA, US_CO, US_AK, US_AL, US_AR, US_VT, US_IL, US_GA, US_IN, US_IA, US_OK, US_AZ, US_ID, US_CT, US_ME, US_MD, US_MA, US_OH, US_UT, US_MO, US_MN, US_MI, US_RI, US_KS, US_MT, US_MS, US_SC, US_KY, US_OR, US_SD)",
            "in": "query",
            "name": "g",
            "type": "string"
          },
          {
            "description": "boolean value",
            "in": "query",
            "name": "include_categories",
            "type": "string"
          },
          {
            "description": "the maximum number of items desired (default: 25, maximum: 100)",
            "in": "query",
            "name": "limit",
            "type": "string"
          },
          {
            "description": "(optional) the string all",
            "in": "query",
            "name": "show",
            "type": "string"
          },
          {
            "description": "(optional) expand subreddits",
            "in": "query",
            "name": "sr_detail",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/live/{thread}": {
      "get": {
        "description": "Get a list of updates posted in this thread.\n\nSee also: /api/live/thread/update.\n\nThis endpoint is a listing.",
        "parameters": [
          {
            "description": "the ID of a single update. e.g. LiveUpdate_ff87068e-a126-11e3-9f93-12313b0b3603",
            "in": "query",
            "name": "after",
            "type": "string"
          },
          {
            "description": "the ID of a single update. e.g. LiveUpdate_ff87068e-a126-11e3-9f93-12313b0b3603",
            "in": "query",
            "name": "before",
            "type": "string"
          },
          {
            "description": "a positive integer (default: 0)",
            "in": "query",
            "name": "count",
            "type": "string"
          },
          {
            "description": "(internal use only)",
            "in": "query",
            "name": "is_embed",
            "type": "string"
          },
          {
            "description": "the maximum number of items desired (default: 25, maximum: 100)",
            "in": "query",
            "name": "limit",
            "type": "string"
          },
          {
            "description": "subreddit name",
            "in": "query",
            "name": "stylesr",
            "type": "string"
          },
          {
            "in": "path",
            "name": "thread",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/live/{thread}/about": {
      "get": {
        "description": "Get some basic information about the live thread.\n\nSee also: /api/live/thread/edit.",
        "parameters": [
          {
            "in": "path",
            "name": "thread",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/live/{thread}/contributors": {
      "get": {
        "description": "Get a list of users that contribute to this thread.\n\nSee also: /api/live/thread/invite_contributor, and\n/api/live/thread/rm_contributor.",
        "parameters": [
          {
            "in": "path",
            "name": "thread",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/live/{thread}/discussions": {
      "get": {
        "description": "Get a list of reddit submissions linking to this thread.\n\nThis endpoint is a listing.",
        "parameters": [
          {
            "description": "fullname of a thing",
            "in": "query",
            "name": "after",
            "type": "string"
          },
          {
            "description": "fullname of a thing",
            "in": "query",
            "name": "before",
            "type": "string"
          },
          {
            "description": "a positive integer (default: 0)",
            "in": "query",
            "name": "count",
            "type": "string"
          },
          {
            "description": "the maximum number of items desired (default: 25, maximum: 100)",
            "in": "query",
            "name": "limit",
            "type": "string"
          },
          {
            "description": "(optional) the string all",
            "in": "query",
            "name": "show",
            "type": "string"
          },
          {
            "description": "(optional) expand subreddits",
            "in": "query",
            "name": "sr_detail",
            "type": "string"
          },
          {
            "in": "path",
            "name": "thread",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/live/{thread}/updates/{update_id}": {
      "get": {
        "description": "Get details about a specific update in a live thread.",
        "parameters": [
          {
            "in": "path",
            "name": "thread",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "update_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/message/{where}": {
      "get": {
        "description": "This endpoint is a listing.",
        "parameters": [
          {
            "description": "fullname of a thing",
            "in": "query",
            "name": "after",
            "type": "string"
          },
          {
            "description": "fullname of a thing",
            "in": "query",
            "name": "before",
            "type": "string"
          },
          {
            "description": "a positive integer (default: 0)",
            "in": "query",
            "name": "count",
            "type": "string"
          },
          {
            "description": "boolean value",
            "in": "query",
            "name": "include_categories",
            "type": "string"
          },
          {
            "description": "the maximum number of items desired (default: 25, maximum: 100)",
            "in": "query",
            "name": "limit",
            "type": "string"
          },
          {
            "description": "one of (true, false)",
            "in": "query",
            "name": "mark",
            "type": "string"
          },
          {
            "in": "query",
            "name": "mid",
            "type": "string"
          },
          {
            "description": "(optional) the string all",
            "in": "query",
            "name": "show",
            "type": "string"
          },
          {
            "description": "(optional) expand subreddits",
            "in": "query",
            "name": "sr_detail",
            "type": "string"
          },
          {
            "in": "path",
            "name": "where",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/new": {
      "get": {
        "description": "This endpoint is a listing.",
        "parameters": [
          {
            "description": "fullname of a thing",
            "in": "query",
            "name": "after",
            "type": "string"
          },
          {
            "description": "fullname of a thing",
            "in": "query",
            "name": "before",
            "type": "string"
          },
          {
            "description": "a positive integer (default: 0)",
            "in": "query",
            "name": "count",
            "type": "string"
          },
          {
            "description": "boolean value",
            "in": "query",
            "name": "include_categories",
            "type": "string"
          },
          {
            "description": "the maximum number of items desired (default: 25, maximum: 100)",
            "in": "query",
            "name": "limit",
            "type": "string"
          },
          {
            "description": "(optional) the string all",
            "in": "query",
            "name": "show",
            "type": "string"
          },
          {
            "description": "(optional) expand subreddits",
            "in": "query",
            "name": "sr_detail",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/prefs/{where}": {
      "get": {
        "description": "This endpoint is a listing.",
        "parameters": [
          {
            "description": "fullname of a thing",
            "in": "query",
            "name": "after",
            "type": "string"
          },
          {
            "description": "fullname of a thing",
            "in": "query",
            "name": "before",
            "type": "string"
          },
          {
            "description": "a positive integer (default: 0)",
            "in": "query",
            "name": "count",
            "type": "string"
          },
          {
            "description": "boolean value",
            "in": "query",
            "name": "include_categories",
            "type": "string"
          },
          {
            "description": "the maximum number of items desired (default: 25, maximum: 100)",
            "in": "query",
            "name": "limit",
            "type": "string"
          },
          {
            "description": "(optional) the string all",
            "in": "query",
            "name": "show",
            "type": "string"
          },
          {
            "description": "(optional) expand subreddits",
            "in": "query",
            "name": "sr_detail",
            "type": "string"
          },
          {
            "in": "path",
            "name": "where",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/profiles/search": {
      "get": {
        "description": "Search user profiles by title and description.\n\nThis endpoint is a listing.",
        "parameters": [
          {
            "description": "fullname of a thing",
            "in": "query",
            "name": "after",
            "type": "string"
          },
          {
            "description": "fullname of a thing",
            "in": "query",
            "name": "before",
            "type": "string"
          },
          {
            "description": "a positive integer (default: 0)",
            "in": "query",
            "name": "count",
            "type": "string"
          },
          {
            "description": "the maximum number of items desired (default: 25, maximum: 100)",
            "in": "query",
            "name": "limit",
            "type": "string"
          },
          {
            "description": "a search query",
            "in": "query",
            "name": "q",
            "type": "string"
          },
          {
            "description": "(optional) the string all",
            "in": "query",
            "name": "show",
            "type": "string"
          },
          {
            "description": "one of (relevance, activity)",
            "in": "query",
            "name": "sort",
            "type": "string"
          },
          {
            "description": "(optional) expand subreddits",
            "in": "query",
            "name": "sr_detail",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/r/{subreddit}/{sort}": {
      "get": {
        "description": "This endpoint is a listing.",
        "parameters": [
          {
            "description": "fullname of a thing",
            "in": "query",
            "name": "after",
            "type": "string"
          },
          {
            "description": "fullname of a thing",
            "in": "query",
            "name": "before",
            "type": "string"
          },
          {
            "description": "a positive integer (default: 0)",
            "in": "query",
            "name": "count",
            "type": "string"
          },
          {
            "description": "boolean value",
            "in": "query",
            "name": "include_categories",
            "type": "string"
          },
          {
            "description": "the maximum number of items desired (default: 25, maximum: 100)",
            "in": "query",
            "name": "limit",
            "type": "string"
          },
          {
            "description": "(optional) the string all",
            "in": "query",
            "name": "show",
            "type": "string"
          },
          {
            "description": "(optional) expand subreddits",
            "in": "query",
            "name": "sr_detail",
            "type": "string"
          },
          {
            "description": "one of (hour, day, week, month, year, all)",
            "in": "query",
            "name": "t",
            "type": "string"
          },
          {
            "in": "path",
            "name": "subreddit",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "sort",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/r/{subreddit}/about": {
      "get": {
        "description": "Return information about the subreddit.\n\nData includes the subscriber count, description, and header image.",
        "parameters": [
          {
            "in": "path",
            "name": "subreddit",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/r/{subreddit}/about/{location}": {
      "get": {
        "description": "Return a listing of posts relevant to moderators.\n\n\nreports: Things that have been reported.\nspam: Things that have been marked as spam or otherwise removed.\nmodqueue: Things requiring moderator review, such as reported things\nand items caught by the spam filter.\nunmoderated: Things that have yet to be approved/removed by a mod.\nedited: Things that have been edited recently.\n\n\nRequires the \"posts\" moderator permission for the subreddit.\n\nThis endpoint is a listing.",
        "parameters": [
          {
            "description": "fullname of a thing",
            "in": "query",
            "name": "after",
            "type": "string"
          },
          {
            "description": "fullname of a thing",
            "in": "query",
            "name": "before",
            "type": "string"
          },
          {
            "description": "a positive integer (default: 0)",
            "in": "query",
            "name": "count",
            "type": "string"
          },
          {
            "description": "the maximum number of items desired (default: 25, maximum: 100)",
            "in": "query",
            "name": "limit",
            "type": "string"
          },
          {
            "in": "path",
            "name": "location",
            "required": true,
            "type": "string"
          },
          {
            "description": "one of (links, comments)",
            "in": "query",
            "name": "only",
            "type": "string"
          },
          {
            "description": "(optional) the string all",
            "in": "query",
            "name": "show",
            "type": "string"
          },
          {
            "description": "(optional) expand subreddits",
            "in": "query",
            "name": "sr_detail",
            "type": "string"
          },
          {
            "in": "path",
            "name": "subreddit",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/r/{subreddit}/about/{where}": {
      "get": {
        "description": "This endpoint is a listing.",
        "parameters": [
          {
            "description": "fullname of a thing",
            "in": "query",
            "name": "after",
            "type": "string"
          },
          {
            "description": "fullname of a thing",
            "in": "query",
            "name": "before",
            "type": "string"
          },
          {
            "description": "a positive integer (default: 0)",
            "in": "query",
            "name": "count",
            "type": "string"
          },
          {
            "description": "boolean value",
            "in": "query",
            "name": "include_categories",
            "type": "string"
          },
          {
            "description": "the maximum number of items desired (default: 25, maximum: 100)",
            "in": "query",
            "name": "limit",
            "type": "string"
          },
          {
            "description": "(optional) the string all",
            "in": "query",
            "name": "show",
            "type": "string"
          },
          {
            "description": "(optional) expand subreddits",
            "in": "query",
            "name": "sr_detail",
            "type": "string"
          },
          {
            "description": "A valid, existing reddit username",
            "in": "query",
            "name": "user",
            "type": "string"
          },
          {
            "in": "path",
            "name": "subreddit",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "where",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/r/{subreddit}/about/edit": {
      "get": {
        "description": "Get the current settings of a subreddit.\n\nIn the API, this returns the current settings of the subreddit as used\nby /api/site_admin.  On the HTML site, it will\ndisplay a form for editing the subreddit.",
        "parameters": [
          {
            "description": "one of (true, false)",
            "in": "query",
            "name": "created",
            "type": "string"
          },
          {
            "in": "query",
            "name": "location",
            "type": "string"
          },
          {
            "in": "path",
            "name": "subreddit",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/r/{subreddit}/about/log": {
      "get": {
        "description": "Get a list of recent moderation actions.\n\nModerator actions taken within a subreddit are logged. This listing is\na view of that log with various filters to aid in analyzing the\ninformation.\n\nThe optional mod parameter can be a comma-delimited list of moderator\nnames to restrict the results to, or the string a to restrict the\nresults to admin actions taken within the subreddit.\n\nThe type parameter is optional and if sent limits the log entries\nreturned to only those of the type specified.\n\nThis endpoint is a listing.",
        "parameters": [
          {
            "description": "fullname of a thing",
            "in": "query",
            "name": "after",
            "type": "string"
          },
          {
            "description": "fullname of a thing",
            "in": "query",
            "name": "before",
            "type": "string"
          },
          {
            "description": "a positive integer (default: 0)",
            "in": "query",
            "name": "count",
            "type": "string"
          },
          {
            "description": "the maximum number of items desired (default: 25, maximum: 500)",
            "in": "query",
            "name": "limit",
            "type": "string"
          },
          {
            "description": "(optional) a moderator filter",
            "in": "query",
            "name": "mod",
            "type": "string"
          },
          {
            "description": "(optional) the string all",
            "in": "query",
            "name": "show",
            "type": "string"
          },
          {
            "description": "(optional) expand subreddits",
            "in": "query",
            "name": "sr_detail",
            "type": "string"
          },
          {
            "description": "one of (banuser, unbanuser, spamlink, removelink, approvelink, spamcomment, removecomment, approvecomment, addmoderator, invitemoderator, uninvitemoderator, acceptmoderatorinvite, removemoderator, addcontributor, removecontributor, editsettings, editflair, distinguish, marknsfw, wikibanned, wikicontributor, wikiunbanned, wikipagelisted, removewikicontributor, wikirevise, wikipermlevel, ignorereports, unignorereports, setpermissions, setsuggestedsort, sticky, unsticky, setcontestmode, unsetcontestmode, lock, unlock, muteuser, unmuteuser, createrule, editrule, deleterule, spoiler, unspoiler, modmail_enrollment, community_styling, community_widgets, markoriginalcontent)",
            "in": "query",
            "name": "type",
            "type": "string"
          },
          {
            "in": "path",
            "name": "subreddit",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/r/{subreddit}/about/rules": {
      "get": {
        "description": "Get the rules for the current subreddit",
        "parameters": [
          {
            "in": "path",
            "name": "subreddit",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/r/{subreddit}/about/traffic": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "subreddit",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/r/{subreddit}/api/accept_moderator_invite": {
      "post": {
        "description": "Accept an invite to moderate the specified subreddit.\n\nThe authenticated user must have been invited to moderate the subreddit\nby one of its current moderators.\n\nSee also: /api/friend and\n/subreddits/mine.",
        "parameters": [
          {
            "description": "the string json",
            "in": "formData",
            "name": "api_type",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          },
          {
            "in": "path",
            "name": "subreddit",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/r/{subreddit}/api/clearflairtemplates": {
      "post": {
        "parameters": [
          {
            "description": "the string json",
            "in": "formData",
            "name": "api_type",
            "type": "string"
          },
          {
            "description": "one of (USER_FLAIR, LINK_FLAIR)",
            "in": "formData",
            "name": "flair_type",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          },
          {
            "in": "path",
            "name": "subreddit",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/r/{subreddit}/api/delete_sr_banner": {
      "post": {
        "description": "Remove the subreddit's custom mobile banner.\n\nSee also: /api/upload_sr_img.",
        "parameters": [
          {
            "description": "the string json",
            "in": "formData",
            "name": "api_type",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          },
          {
            "in": "path",
            "name": "subreddit",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/r/{subreddit}/api/delete_sr_header": {
      "post": {
        "description": "Remove the subreddit's custom header image.\n\nThe sitewide-default header image will be shown again after this call.\n\nSee also: /api/upload_sr_img.",
        "parameters": [
          {
            "description": "the string json",
            "in": "formData",
            "name": "api_type",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          },
          {
            "in": "path",
            "name": "subreddit",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/r/{subreddit}/api/delete_sr_icon": {
      "post": {
        "description": "Remove the subreddit's custom mobile icon.\n\nSee also: /api/upload_sr_img.",
        "parameters": [
          {
            "description": "the string json",
            "in": "formData",
            "name": "api_type",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          },
          {
            "in": "path",
            "name": "subreddit",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/r/{subreddit}/api/delete_sr_img": {
      "post": {
        "description": "Remove an image from the subreddit's custom image set.\n\nThe image will no longer count against the subreddit's image limit.\nHowever, the actual image data may still be accessible for an\nunspecified amount of time. If the image is currently referenced by the\nsubreddit's stylesheet, that stylesheet will no longer validate and\nwon't be editable until the image reference is removed.\n\nSee also: /api/upload_sr_img.",
        "parameters": [
          {
            "description": "the string json",
            "in": "formData",
            "name": "api_type",
            "type": "string"
          },
          {
            "description": "a valid subreddit image name",
            "in": "formData",
            "name": "img_name",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          },
          {
            "in": "path",
            "name": "subreddit",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/r/{subreddit}/api/deleteflair": {
      "post": {
        "parameters": [
          {
            "description": "the string json",
            "in": "formData",
            "name": "api_type",
            "type": "string"
          },
          {
            "description": "a user by name",
            "in": "formData",
            "name": "name",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          },
          {
            "in": "path",
            "name": "subreddit",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/r/{subreddit}/api/deleteflairtemplate": {
      "post": {
        "parameters": [
          {
            "description": "the string json",
            "in": "formData",
            "name": "api_type",
            "type": "string"
          },
          {
            "in": "formData",
            "name": "flair_template_id",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          },
          {
            "in": "path",
            "name": "subreddit",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/r/{subreddit}/api/flair": {
      "post": {
        "parameters": [
          {
            "description": "the string json",
            "in": "formData",
            "name": "api_type",
            "type": "string"
          },
          {
            "description": "a valid subreddit image name",
            "in": "formData",
            "name": "css_class",
            "type": "string"
          },
          {
            "description": "a fullname of a link",
            "in": "formData",
            "name": "link",
            "type": "string"
          },
          {
            "description": "a user by name",
            "in": "formData",
            "name": "name",
            "type": "string"
          },
          {
            "description": "a string no longer than 64 characters",
            "in": "formData",
            "name": "text",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          },
          {
            "in": "path",
            "name": "subreddit",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/r/{subreddit}/api/flair_template_order": {
      "patch": {
        "description": "Update the order of flair templates in the specified subreddit.\n\nOrder should contain every single flair id for that flair type; omitting\nany id will result in a loss of data.",
        "parameters": [
          {
            "description": "one of (USER_FLAIR, LINK_FLAIR)",
            "in": "formData",
            "name": "flair_type",
            "type": "string"
          },
          {
            "description": "subreddit name",
            "in": "path",
            "name": "subreddit",
            "required": true,
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/r/{subreddit}/api/flairconfig": {
      "post": {
        "parameters": [
          {
            "description": "the string json",
            "in": "formData",
            "name": "api_type",
            "type": "string"
          },
          {
            "description": "boolean value",
            "in": "formData",
            "name": "flair_enabled",
            "type": "string"
          },
          {
            "description": "one of (left, right)",
            "in": "formData",
            "name": "flair_position",
            "type": "string"
          },
          {
            "description": "boolean value",
            "in": "formData",
            "name": "flair_self_assign_enabled",
            "type": "string"
          },
          {
            "description": "one of (`,left,right`)",
            "in": "formData",
            "name": "link_flair_position",
            "type": "string"
          },
          {
            "description": "boolean value",
            "in": "formData",
            "name": "link_flair_self_assign_enabled",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          },
          {
            "in": "path",
            "name": "subreddit",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/r/{subreddit}/api/flaircsv": {
      "post": {
        "description": "Change the flair of multiple users in the same subreddit with a\nsingle API call.\n\nRequires a string 'flair_csv' which has up to 100 lines of the form\n'user,flairtext,cssclass' (Lines beyond the 100th are ignored).\n\nIf both cssclass and flairtext are the empty string for a given\nuser, instead clears that user's flair.\n\nReturns an array of objects indicating if each flair setting was\napplied, or a reason for the failure.",
        "parameters": [
          {
            "description": "comma-seperated flair information",
            "in": "formData",
            "name": "flair_csv",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          },
          {
            "in": "path",
            "name": "subreddit",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/r/{subreddit}/api/flairlist": {
      "get": {
        "description": "This endpoint is a listing.",
        "parameters": [
          {
            "description": "fullname of a thing",
            "in": "query",
            "name": "after",
            "type": "string"
          },
          {
            "description": "fullname of a thing",
            "in": "query",
            "name": "before",
            "type": "string"
          },
          {
            "description": "a positive integer (default: 0)",
            "in": "query",
            "name": "count",
            "type": "string"
          },
          {
            "description": "the maximum number of items desired (default: 25, maximum: 1000)",
            "in": "query",
            "name": "limit",
            "type": "string"
          },
          {
            "description": "a user by name",
            "in": "query",
            "name": "name",
            "type": "string"
          },
          {
            "description": "(optional) the string all",
            "in": "query",
            "name": "show",
            "type": "string"
          },
          {
            "description": "(optional) expand subreddits",
            "in": "query",
            "name": "sr_detail",
            "type": "string"
          },
          {
            "in": "path",
            "name": "subreddit",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/r/{subreddit}/api/flairselector": {
      "post": {
        "description": "Return information about a users's flair options.\n\nIf link is given, return link flair options.\nOtherwise, return user flair options for this subreddit.\n\nThe logged in user's flair is also returned.\nSubreddit moderators may give a user by name to instead\nretrieve that user's flair.",
        "parameters": [
          {
            "description": "a fullname of a link",
            "in": "formData",
            "name": "link",
            "type": "string"
          },
          {
            "description": "a user by name",
            "in": "formData",
            "name": "name",
            "type": "string"
          },
          {
            "in": "path",
            "name": "subreddit",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/r/{subreddit}/api/flairtemplate": {
      "post": {
        "parameters": [
          {
            "description": "the string json",
            "in": "formData",
            "name": "api_type",
            "type": "string"
          },
          {
            "description": "a valid subreddit image name",
            "in": "formData",
            "name": "css_class",
            "type": "string"
          },
          {
            "in": "formData",
            "name": "flair_template_id",
            "type": "string"
          },
          {
            "description": "one of (USER_FLAIR, LINK_FLAIR)",
            "in": "formData",
            "name": "flair_type",
            "type": "string"
          },
          {
            "description": "a string no longer than 64 characters",
            "in": "formData",
            "name": "text",
            "type": "string"
          },
          {
            "description": "boolean value",
            "in": "formData",
            "name": "text_editable",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          },
          {
            "in": "path",
            "name": "subreddit",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/r/{subreddit}/api/flairtemplate_v2": {
      "post": {
        "description": "Create or update a flair template.\n\nThis new endpoint is primarily used for the redesign.",
        "parameters": [
          {
            "description": "the string json",
            "in": "formData",
            "name": "api_type",
            "type": "string"
          },
          {
            "description": "a 6-digit rgb hex color, e.g. #AABBCC",
            "in": "formData",
            "name": "background_color",
            "type": "string"
          },
          {
            "in": "formData",
            "name": "flair_template_id",
            "type": "string"
          },
          {
            "description": "one of (USER_FLAIR, LINK_FLAIR)",
            "in": "formData",
            "name": "flair_type",
            "type": "string"
          },
          {
            "description": "boolean value",
            "in": "formData",
            "name": "mod_only",
            "type": "string"
          },
          {
            "description": "a string no longer than 64 characters",
            "in": "formData",
            "name": "text",
            "type": "string"
          },
          {
            "description": "one of (light, dark)",
            "in": "formData",
            "name": "text_color",
            "type": "string"
          },
          {
            "description": "boolean value",
            "in": "formData",
            "name": "text_editable",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          },
          {
            "in": "path",
            "name": "subreddit",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/r/{subreddit}/api/friend": {
      "post": {
        "description": "Create a relationship between a user and another user or subreddit\n\nOAuth2 use requires appropriate scope based\non the 'type' of the relationship:\n\n\nmoderator: Use \"moderator_invite\"\nmoderator_invite: modothers\ncontributor: modcontributors\nbanned: modcontributors\nmuted: modcontributors\nwikibanned: modcontributors and modwiki\nwikicontributor: modcontributors and modwiki\nfriend: Use /api/v1/me/friends/{username}\nenemy: Use /api/block\n\n\nComplement to POST_unfriend",
        "parameters": [
          {
            "description": "the string json",
            "in": "formData",
            "name": "api_type",
            "type": "string"
          },
          {
            "description": "fullname of a thing",
            "in": "formData",
            "name": "ban_context",
            "type": "string"
          },
          {
            "description": "raw markdown text",
            "in": "formData",
            "name": "ban_message",
            "type": "string"
          },
          {
            "description": "a string no longer than 100 characters",
            "in": "formData",
            "name": "ban_reason",
            "type": "string"
          },
          {
            "in": "formData",
            "name": "container",
            "type": "string"
          },
          {
            "description": "an integer between 1 and 999",
            "in": "formData",
            "name": "duration",
            "type": "string"
          },
          {
            "description": "the name of an existing user",
            "in": "formData",
            "name": "name",
            "type": "string"
          },
          {
            "description": "a string no longer than 300 characters",
            "in": "formData",
            "name": "note",
            "type": "string"
          },
          {
            "in": "formData",
            "name": "permissions",
            "type": "string"
          },
          {
            "description": "one of (friend, moderator, moderator_invite, contributor, banned, muted, wikibanned, wikicontributor)",
            "in": "formData",
            "name": "type",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          },
          {
            "in": "path",
            "name": "subreddit",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/r/{subreddit}/api/info": {
      "get": {
        "description": "Return a listing of things specified by their fullnames.\n\nOnly Links, Comments, and Subreddits are allowed.",
        "parameters": [
          {
            "description": "A comma-separated list of thing fullnames",
            "in": "query",
            "name": "id",
            "type": "string"
          },
          {
            "description": "a valid URL",
            "in": "query",
            "name": "url",
            "type": "string"
          },
          {
            "in": "path",
            "name": "subreddit",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/r/{subreddit}/api/link_flair": {
      "get": {
        "description": "Return list of available link flair for the current subreddit.\n\nWill not return flair if the user cannot set their own link flair and\nthey are not a moderator that can set flair.",
        "parameters": [
          {
            "in": "path",
            "name": "subreddit",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/r/{subreddit}/api/link_flair_v2": {
      "get": {
        "description": "Return list of available link flair for the current subreddit.\n\nWill not return flair if the user cannot set their own link flair and\nthey are not a moderator that can set flair.",
        "parameters": [
          {
            "in": "path",
            "name": "subreddit",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/r/{subreddit}/api/saved_media_text": {
      "get": {
        "description": "Retrieve the advisory text about saving media for relevant media links.\n\nThis endpoint returns a notice for display during the post submission\nprocess that is pertinent to media links.",
        "parameters": [
          {
            "description": "a valid URL",
            "in": "query",
            "name": "url",
            "type": "string"
          },
          {
            "in": "path",
            "name": "subreddit",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/r/{subreddit}/api/selectflair": {
      "post": {
        "parameters": [
          {
            "description": "the string json",
            "in": "formData",
            "name": "api_type",
            "type": "string"
          },
          {
            "description": "a 6-digit rgb hex color, e.g. #AABBCC",
            "in": "formData",
            "name": "background_color",
            "type": "string"
          },
          {
            "in": "formData",
            "name": "flair_template_id",
            "type": "string"
          },
          {
            "description": "a fullname of a link",
            "in": "formData",
            "name": "link",
            "type": "string"
          },
          {
            "description": "a user by name",
            "in": "formData",
            "name": "name",
            "type": "string"
          },
          {
            "description": "[all|only|none]: \"all\" saves attributes and returns rtjson \"only\" only returns rtjson\"none\" only saves attributes",
            "in": "formData",
            "name": "return_rtson",
            "type": "string"
          },
          {
            "description": "a string no longer than 64 characters",
            "in": "formData",
            "name": "text",
            "type": "string"
          },
          {
            "description": "one of (light, dark)",
            "in": "formData",
            "name": "text_color",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          },
          {
            "in": "path",
            "name": "subreddit",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/r/{subreddit}/api/setflairenabled": {
      "post": {
        "parameters": [
          {
            "description": "the string json",
            "in": "formData",
            "name": "api_type",
            "type": "string"
          },
          {
            "description": "boolean value",
            "in": "formData",
            "name": "flair_enabled",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          },
          {
            "in": "path",
            "name": "subreddit",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/r/{subreddit}/api/setpermissions": {
      "post": {
        "parameters": [
          {
            "description": "the string json",
            "in": "formData",
            "name": "api_type",
            "type": "string"
          },
          {
            "description": "the name of an existing user",
            "in": "formData",
            "name": "name",
            "type": "string"
          },
          {
            "in": "formData",
            "name": "permissions",
            "type": "string"
          },
          {
            "in": "formData",
            "name": "type",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          },
          {
            "in": "path",
            "name": "subreddit",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/r/{subreddit}/api/submit_text": {
      "get": {
        "description": "Get the submission text for the subreddit.\n\nThis text is set by the subreddit moderators and intended to be\ndisplayed on the submission form.\n\nSee also: /api/site_admin.",
        "parameters": [
          {
            "in": "path",
            "name": "subreddit",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/r/{subreddit}/api/subreddit_stylesheet": {
      "post": {
        "description": "Update a subreddit's stylesheet.\n\nop should be save to update the contents of the stylesheet.",
        "parameters": [
          {
            "description": "the string json",
            "in": "formData",
            "name": "api_type",
            "type": "string"
          },
          {
            "description": "one of (save, preview)",
            "in": "formData",
            "name": "op",
            "type": "string"
          },
          {
            "description": "a string up to 256 characters long, consisting of printable characters.",
            "in": "formData",
            "name": "reason",
            "type": "string"
          },
          {
            "description": "the new stylesheet content",
            "in": "formData",
            "name": "stylesheet_contents",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          },
          {
            "in": "path",
            "name": "subreddit",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/r/{subreddit}/api/unfriend": {
      "post": {
        "description": "Remove a relationship between a user and another user or subreddit\n\nThe user can either be passed in by name (nuser)\nor by fullname (iuser).  If type is friend or enemy,\n'container' MUST be the current user's fullname;\nfor other types, the subreddit must be set\nvia URL (e.g., /r/funny/api/unfriend)\n\nOAuth2 use requires appropriate scope based\non the 'type' of the relationship:\n\n\nmoderator: modothers\nmoderator_invite: modothers\ncontributor: modcontributors\nbanned: modcontributors\nmuted: modcontributors\nwikibanned: modcontributors and modwiki\nwikicontributor: modcontributors and modwiki\nfriend: Use /api/v1/me/friends/{username}\nenemy: privatemessages\n\n\nComplement to POST_friend",
        "parameters": [
          {
            "in": "formData",
            "name": "container",
            "type": "string"
          },
          {
            "description": "fullname of a thing",
            "in": "formData",
            "name": "id",
            "type": "string"
          },
          {
            "description": "the name of an existing user",
            "in": "formData",
            "name": "name",
            "type": "string"
          },
          {
            "description": "one of (friend, enemy, moderator, moderator_invite, contributor, banned, muted, wikibanned, wikicontributor)",
            "in": "formData",
            "name": "type",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          },
          {
            "in": "path",
            "name": "subreddit",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/r/{subreddit}/api/upload_sr_img": {
      "post": {
        "description": "Add or replace a subreddit image, custom header logo, custom mobile\nicon, or custom mobile banner.\n\n\nIf the upload_type value is img, an image for use in the\nsubreddit stylesheet is uploaded with the name specified in name.\nIf the upload_type value is header then the image uploaded will\nbe the subreddit's new logo and name will be ignored.\nIf the upload_type value is icon then the image uploaded will be\nthe subreddit's new mobile icon and name will be ignored.\nIf the upload_type value is banner then the image uploaded will\nbe the subreddit's new mobile banner and name will be ignored.\n\n\nFor backwards compatibility, if upload_type is not specified, the\nheader field will be used instead:\n\n\nIf the header field has value 0, then upload_type is img.\nIf the header field has value 1, then upload_type is header.\n\n\nThe img_type field specifies whether to store the uploaded image as a\nPNG or JPEG.\n\nSubreddits have a limited number of images that can be in use at any\ngiven time. If no image with the specified name already exists, one of\nthe slots will be consumed.\n\nIf an image with the specified name already exists, it will be\nreplaced.  This does not affect the stylesheet immediately, but will\ntake effect the next time the stylesheet is saved.\n\nSee also: /api/delete_sr_img,\n/api/delete_sr_header,\n/api/delete_sr_icon, and\n/api/delete_sr_banner.",
        "parameters": [
          {
            "description": "file upload with maximum size of 500 KiB",
            "in": "formData",
            "name": "file",
            "type": "string"
          },
          {
            "description": "(optional) can be ignored",
            "in": "formData",
            "name": "formid",
            "type": "string"
          },
          {
            "description": "an integer between 0 and 1",
            "in": "formData",
            "name": "header",
            "type": "string"
          },
          {
            "description": "one of png or jpg (default: png)",
            "in": "formData",
            "name": "img_type",
            "type": "string"
          },
          {
            "description": "a valid subreddit image name",
            "in": "formData",
            "name": "name",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          },
          {
            "description": "one of (img, header, icon, banner)",
            "in": "formData",
            "name": "upload_type",
            "type": "string"
          },
          {
            "in": "path",
            "name": "subreddit",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/r/{subreddit}/api/user_flair": {
      "get": {
        "description": "Return list of available user flair for the current subreddit.\n\nWill not return flair if flair is disabled on the subreddit,\nthe user cannot set their own flair, or they are not a moderator\nthat can set flair.",
        "parameters": [
          {
            "in": "path",
            "name": "subreddit",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/r/{subreddit}/api/user_flair_v2": {
      "get": {
        "description": "Return list of available user flair for the current subreddit.\n\nIf user is not a mod of the subreddit, this endpoint filters\nout mod_only templates.",
        "parameters": [
          {
            "in": "path",
            "name": "subreddit",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/r/{subreddit}/api/wiki/alloweditor/{act}": {
      "post": {
        "description": "Allow/deny username to edit this wiki page",
        "parameters": [
          {
            "description": "one of (del, add)",
            "in": "path",
            "name": "act",
            "required": true,
            "type": "string"
          },
          {
            "description": "the name of an existing wiki page",
            "in": "formData",
            "name": "page",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          },
          {
            "description": "the name of an existing user",
            "in": "formData",
            "name": "username",
            "type": "string"
          },
          {
            "in": "path",
            "name": "subreddit",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/r/{subreddit}/api/wiki/edit": {
      "post": {
        "description": "Edit a wiki page",
        "parameters": [
          {
            "in": "formData",
            "name": "content",
            "type": "string"
          },
          {
            "description": "the name of an existing page or a new page to create",
            "in": "formData",
            "name": "page",
            "type": "string"
          },
          {
            "description": "the starting point revision for this edit",
            "in": "formData",
            "name": "previous",
            "type": "string"
          },
          {
            "description": "a string up to 256 characters long, consisting of printable characters.",
            "in": "formData",
            "name": "reason",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          },
          {
            "in": "path",
            "name": "subreddit",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/r/{subreddit}/api/wiki/hide": {
      "post": {
        "description": "Toggle the public visibility of a wiki page revision",
        "parameters": [
          {
            "description": "the name of an existing wiki page",
            "in": "formData",
            "name": "page",
            "type": "string"
          },
          {
            "description": "a wiki revision ID",
            "in": "formData",
            "name": "revision",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          },
          {
            "in": "path",
            "name": "subreddit",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/r/{subreddit}/api/wiki/revert": {
      "post": {
        "description": "Revert a wiki page to revision",
        "parameters": [
          {
            "description": "the name of an existing wiki page",
            "in": "formData",
            "name": "page",
            "type": "string"
          },
          {
            "description": "a wiki revision ID",
            "in": "formData",
            "name": "revision",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          },
          {
            "in": "path",
            "name": "subreddit",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/r/{subreddit}/comments/{article}": {
      "get": {
        "description": "Get the comment tree for a given Link article.\n\nIf supplied, comment is the ID36 of a comment in the comment tree for\narticle. This comment will be the (highlighted) focal point of the\nreturned view and context will be the number of parents shown.\n\ndepth is the maximum depth of subtrees in the thread.\n\nlimit is the maximum number of comments to return.\n\nSee also: /api/morechildren and\n/api/comment.",
        "parameters": [
          {
            "description": "ID36 of a link",
            "in": "path",
            "name": "article",
            "required": true,
            "type": "string"
          },
          {
            "description": "(optional) ID36 of a comment",
            "in": "query",
            "name": "comment",
            "type": "string"
          },
          {
            "description": "an integer between 0 and 8",
            "in": "query",
            "name": "context",
            "type": "string"
          },
          {
            "description": "(optional) an integer",
            "in": "query",
            "name": "depth",
            "type": "string"
          },
          {
            "description": "(optional) an integer",
            "in": "query",
            "name": "limit",
            "type": "string"
          },
          {
            "description": "boolean value",
            "in": "query",
            "name": "showedits",
            "type": "string"
          },
          {
            "description": "boolean value",
            "in": "query",
            "name": "showmore",
            "type": "string"
          },
          {
            "description": "one of (confidence, top, new, controversial, old, random, qa, live)",
            "in": "query",
            "name": "sort",
            "type": "string"
          },
          {
            "description": "(optional) expand subreddits",
            "in": "query",
            "name": "sr_detail",
            "type": "string"
          },
          {
            "description": "boolean value",
            "in": "query",
            "name": "threaded",
            "type": "string"
          },
          {
            "description": "an integer between 0 and 50",
            "in": "query",
            "name": "truncate",
            "type": "string"
          },
          {
            "in": "path",
            "name": "subreddit",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/r/{subreddit}/hot": {
      "get": {
        "description": "This endpoint is a listing.",
        "parameters": [
          {
            "description": "fullname of a thing",
            "in": "query",
            "name": "after",
            "type": "string"
          },
          {
            "description": "fullname of a thing",
            "in": "query",
            "name": "before",
            "type": "string"
          },
          {
            "description": "a positive integer (default: 0)",
            "in": "query",
            "name": "count",
            "type": "string"
          },
          {
            "description": "one of (GLOBAL, US, AR, AU, BG, CA, CL, CO, HR, CZ, FI, GR, HU, IS, IN, IE, JP, MY, MX, NZ, PH, PL, PT, PR, RO, RS, SG, SE, TW, TH, TR, GB, US_WA, US_DE, US_DC, US_WI, US_WV, US_HI, US_FL, US_WY, US_NH, US_NJ, US_NM, US_TX, US_LA, US_NC, US_ND, US_NE, US_TN, US_NY, US_PA, US_CA, US_NV, US_VA, US_CO, US_AK, US_AL, US_AR, US_VT, US_IL, US_GA, US_IN, US_IA, US_OK, US_AZ, US_ID, US_CT, US_ME, US_MD, US_MA, US_OH, US_UT, US_MO, US_MN, US_MI, US_RI, US_KS, US_MT, US_MS, US_SC, US_KY, US_OR, US_SD)",
            "in": "query",
            "name": "g",
            "type": "string"
          },
          {
            "description": "boolean value",
            "in": "query",
            "name": "include_categories",
            "type": "string"
          },
          {
            "description": "the maximum number of items desired (default: 25, maximum: 100)",
            "in": "query",
            "name": "limit",
            "type": "string"
          },
          {
            "description": "(optional) the string all",
            "in": "query",
            "name": "show",
            "type": "string"
          },
          {
            "description": "(optional) expand subreddits",
            "in": "query",
            "name": "sr_detail",
            "type": "string"
          },
          {
            "in": "path",
            "name": "subreddit",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/r/{subreddit}/new": {
      "get": {
        "description": "This endpoint is a listing.",
        "parameters": [
          {
            "description": "fullname of a thing",
            "in": "query",
            "name": "after",
            "type": "string"
          },
          {
            "description": "fullname of a thing",
            "in": "query",
            "name": "before",
            "type": "string"
          },
          {
            "description": "a positive integer (default: 0)",
            "in": "query",
            "name": "count",
            "type": "string"
          },
          {
            "description": "boolean value",
            "in": "query",
            "name": "include_categories",
            "type": "string"
          },
          {
            "description": "the maximum number of items desired (default: 25, maximum: 100)",
            "in": "query",
            "name": "limit",
            "type": "string"
          },
          {
            "description": "(optional) the string all",
            "in": "query",
            "name": "show",
            "type": "string"
          },
          {
            "description": "(optional) expand subreddits",
            "in": "query",
            "name": "sr_detail",
            "type": "string"
          },
          {
            "in": "path",
            "name": "subreddit",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/r/{subreddit}/random": {
      "get": {
        "description": "The Serendipity button",
        "parameters": [
          {
            "in": "path",
            "name": "subreddit",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/r/{subreddit}/rising": {
      "get": {
        "description": "This endpoint is a listing.",
        "parameters": [
          {
            "description": "fullname of a thing",
            "in": "query",
            "name": "after",
            "type": "string"
          },
          {
            "description": "fullname of a thing",
            "in": "query",
            "name": "before",
            "type": "string"
          },
          {
            "description": "a positive integer (default: 0)",
            "in": "query",
            "name": "count",
            "type": "string"
          },
          {
            "description": "boolean value",
            "in": "query",
            "name": "include_categories",
            "type": "string"
          },
          {
            "description": "the maximum number of items desired (default: 25, maximum: 100)",
            "in": "query",
            "name": "limit",
            "type": "string"
          },
          {
            "description": "(optional) the string all",
            "in": "query",
            "name": "show",
            "type": "string"
          },
          {
            "description": "(optional) expand subreddits",
            "in": "query",
            "name": "sr_detail",
            "type": "string"
          },
          {
            "in": "path",
            "name": "subreddit",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/r/{subreddit}/search": {
      "get": {
        "description": "Search links page.\n\nThis endpoint is a listing.",
        "parameters": [
          {
            "description": "fullname of a thing",
            "in": "query",
            "name": "after",
            "type": "string"
          },
          {
            "description": "fullname of a thing",
            "in": "query",
            "name": "before",
            "type": "string"
          },
          {
            "description": "a string no longer than 5 characters",
            "in": "query",
            "name": "category",
            "type": "string"
          },
          {
            "description": "a positive integer (default: 0)",
            "in": "query",
            "name": "count",
            "type": "string"
          },
          {
            "description": "boolean value",
            "in": "query",
            "name": "include_facets",
            "type": "string"
          },
          {
            "description": "the maximum number of items desired (default: 25, maximum: 100)",
            "in": "query",
            "name": "limit",
            "type": "string"
          },
          {
            "description": "a string no longer than 512 characters",
            "in": "query",
            "name": "q",
            "type": "string"
          },
          {
            "description": "boolean value",
            "in": "query",
            "name": "restrict_sr",
            "type": "string"
          },
          {
            "description": "(optional) the string all",
            "in": "query",
            "name": "show",
            "type": "string"
          },
          {
            "description": "one of (relevance, hot, top, new, comments)",
            "in": "query",
            "name": "sort",
            "type": "string"
          },
          {
            "description": "(optional) expand subreddits",
            "in": "query",
            "name": "sr_detail",
            "type": "string"
          },
          {
            "description": "one of (hour, day, week, month, year, all)",
            "in": "query",
            "name": "t",
            "type": "string"
          },
          {
            "description": "(optional) comma-delimited list of result types (sr, link, user)",
            "in": "query",
            "name": "type",
            "type": "string"
          },
          {
            "in": "path",
            "name": "subreddit",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/r/{subreddit}/sidebar": {
      "get": {
        "description": "Get the sidebar for the current subreddit",
        "parameters": [
          {
            "in": "path",
            "name": "subreddit",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/r/{subreddit}/sticky": {
      "get": {
        "description": "Redirect to one of the posts stickied in the current subreddit\n\nThe \"num\" argument can be used to select a specific sticky, and will\ndefault to 1 (the top sticky) if not specified.\nWill 404 if there is not currently a sticky post in this subreddit.",
        "parameters": [
          {
            "description": "an integer between 1 and 2 (default: 1)",
            "in": "query",
            "name": "num",
            "type": "string"
          },
          {
            "in": "path",
            "name": "subreddit",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/r/{subreddit}/stylesheet": {
      "get": {
        "description": "Redirect to the subreddit's stylesheet if one exists.\n\nSee also: /api/subreddit_stylesheet.",
        "parameters": [
          {
            "in": "path",
            "name": "subreddit",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/r/{subreddit}/wiki/{page}": {
      "get": {
        "description": "Return the content of a wiki page\n\nIf v is given, show the wiki page as it was at that version\nIf both v and v2 are given, show a diff of the two",
        "parameters": [
          {
            "description": "the name of an existing wiki page",
            "in": "path",
            "name": "page",
            "required": true,
            "type": "string"
          },
          {
            "description": "a wiki revision ID",
            "in": "query",
            "name": "v",
            "type": "string"
          },
          {
            "description": "a wiki revision ID",
            "in": "query",
            "name": "v2",
            "type": "string"
          },
          {
            "in": "path",
            "name": "subreddit",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/r/{subreddit}/wiki/discussions/{page}": {
      "get": {
        "description": "Retrieve a list of discussions about this wiki page\n\nThis endpoint is a listing.",
        "parameters": [
          {
            "description": "fullname of a thing",
            "in": "query",
            "name": "after",
            "type": "string"
          },
          {
            "description": "fullname of a thing",
            "in": "query",
            "name": "before",
            "type": "string"
          },
          {
            "description": "a positive integer (default: 0)",
            "in": "query",
            "name": "count",
            "type": "string"
          },
          {
            "description": "the maximum number of items desired (default: 25, maximum: 100)",
            "in": "query",
            "name": "limit",
            "type": "string"
          },
          {
            "description": "the name of an existing wiki page",
            "in": "path",
            "name": "page",
            "required": true,
            "type": "string"
          },
          {
            "description": "(optional) the string all",
            "in": "query",
            "name": "show",
            "type": "string"
          },
          {
            "description": "(optional) expand subreddits",
            "in": "query",
            "name": "sr_detail",
            "type": "string"
          },
          {
            "in": "path",
            "name": "subreddit",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/r/{subreddit}/wiki/pages": {
      "get": {
        "description": "Retrieve a list of wiki pages in this subreddit",
        "parameters": [
          {
            "in": "path",
            "name": "subreddit",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/r/{subreddit}/wiki/revisions": {
      "get": {
        "description": "Retrieve a list of recently changed wiki pages in this subreddit",
        "parameters": [
          {
            "description": "fullname of a thing",
            "in": "query",
            "name": "after",
            "type": "string"
          },
          {
            "description": "fullname of a thing",
            "in": "query",
            "name": "before",
            "type": "string"
          },
          {
            "description": "a positive integer (default: 0)",
            "in": "query",
            "name": "count",
            "type": "string"
          },
          {
            "description": "the maximum number of items desired (default: 25, maximum: 100)",
            "in": "query",
            "name": "limit",
            "type": "string"
          },
          {
            "description": "(optional) the string all",
            "in": "query",
            "name": "show",
            "type": "string"
          },
          {
            "description": "(optional) expand subreddits",
            "in": "query",
            "name": "sr_detail",
            "type": "string"
          },
          {
            "in": "path",
            "name": "subreddit",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/r/{subreddit}/wiki/revisions/{page}": {
      "get": {
        "description": "Retrieve a list of revisions of this wiki page\n\nThis endpoint is a listing.",
        "parameters": [
          {
            "description": "fullname of a thing",
            "in": "query",
            "name": "after",
            "type": "string"
          },
          {
            "description": "fullname of a thing",
            "in": "query",
            "name": "before",
            "type": "string"
          },
          {
            "description": "a positive integer (default: 0)",
            "in": "query",
            "name": "count",
            "type": "string"
          },
          {
            "description": "the maximum number of items desired (default: 25, maximum: 100)",
            "in": "query",
            "name": "limit",
            "type": "string"
          },
          {
            "description": "the name of an existing wiki page",
            "in": "path",
            "name": "page",
            "required": true,
            "type": "string"
          },
          {
            "description": "(optional) the string all",
            "in": "query",
            "name": "show",
            "type": "string"
          },
          {
            "description": "(optional) expand subreddits",
            "in": "query",
            "name": "sr_detail",
            "type": "string"
          },
          {
            "in": "path",
            "name": "subreddit",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/r/{subreddit}/wiki/settings/{page}": {
      "get": {
        "description": "Retrieve the current permission settings for page",
        "parameters": [
          {
            "description": "the name of an existing wiki page",
            "in": "path",
            "name": "page",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "subreddit",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      },
      "post": {
        "description": "Update the permissions and visibility of wiki page",
        "parameters": [
          {
            "description": "boolean value",
            "in": "formData",
            "name": "listed",
            "type": "string"
          },
          {
            "description": "the name of an existing wiki page",
            "in": "path",
            "name": "page",
            "required": true,
            "type": "string"
          },
          {
            "description": "an integer",
            "in": "formData",
            "name": "permlevel",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          },
          {
            "in": "path",
            "name": "subreddit",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/random": {
      "get": {
        "description": "The Serendipity button",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/rising": {
      "get": {
        "description": "This endpoint is a listing.",
        "parameters": [
          {
            "description": "fullname of a thing",
            "in": "query",
            "name": "after",
            "type": "string"
          },
          {
            "description": "fullname of a thing",
            "in": "query",
            "name": "before",
            "type": "string"
          },
          {
            "description": "a positive integer (default: 0)",
            "in": "query",
            "name": "count",
            "type": "string"
          },
          {
            "description": "boolean value",
            "in": "query",
            "name": "include_categories",
            "type": "string"
          },
          {
            "description": "the maximum number of items desired (default: 25, maximum: 100)",
            "in": "query",
            "name": "limit",
            "type": "string"
          },
          {
            "description": "(optional) the string all",
            "in": "query",
            "name": "show",
            "type": "string"
          },
          {
            "description": "(optional) expand subreddits",
            "in": "query",
            "name": "sr_detail",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/search": {
      "get": {
        "description": "Search links page.\n\nThis endpoint is a listing.",
        "parameters": [
          {
            "description": "fullname of a thing",
            "in": "query",
            "name": "after",
            "type": "string"
          },
          {
            "description": "fullname of a thing",
            "in": "query",
            "name": "before",
            "type": "string"
          },
          {
            "description": "a string no longer than 5 characters",
            "in": "query",
            "name": "category",
            "type": "string"
          },
          {
            "description": "a positive integer (default: 0)",
            "in": "query",
            "name": "count",
            "type": "string"
          },
          {
            "description": "boolean value",
            "in": "query",
            "name": "include_facets",
            "type": "string"
          },
          {
            "description": "the maximum number of items desired (default: 25, maximum: 100)",
            "in": "query",
            "name": "limit",
            "type": "string"
          },
          {
            "description": "a string no longer than 512 characters",
            "in": "query",
            "name": "q",
            "type": "string"
          },
          {
            "description": "boolean value",
            "in": "query",
            "name": "restrict_sr",
            "type": "string"
          },
          {
            "description": "(optional) the string all",
            "in": "query",
            "name": "show",
            "type": "string"
          },
          {
            "description": "one of (relevance, hot, top, new, comments)",
            "in": "query",
            "name": "sort",
            "type": "string"
          },
          {
            "description": "(optional) expand subreddits",
            "in": "query",
            "name": "sr_detail",
            "type": "string"
          },
          {
            "description": "one of (hour, day, week, month, year, all)",
            "in": "query",
            "name": "t",
            "type": "string"
          },
          {
            "description": "(optional) comma-delimited list of result types (sr, link, user)",
            "in": "query",
            "name": "type",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/sidebar": {
      "get": {
        "description": "Get the sidebar for the current subreddit",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/sticky": {
      "get": {
        "description": "Redirect to one of the posts stickied in the current subreddit\n\nThe \"num\" argument can be used to select a specific sticky, and will\ndefault to 1 (the top sticky) if not specified.\nWill 404 if there is not currently a sticky post in this subreddit.",
        "parameters": [
          {
            "description": "an integer between 1 and 2 (default: 1)",
            "in": "query",
            "name": "num",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/stylesheet": {
      "get": {
        "description": "Redirect to the subreddit's stylesheet if one exists.\n\nSee also: /api/subreddit_stylesheet.",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/subreddits/{where}": {
      "get": {
        "description": "Get all subreddits.\n\nThe where parameter chooses the order in which the subreddits are\ndisplayed.  popular sorts on the activity of the subreddit and the\nposition of the subreddits can shift around. new sorts the subreddits\nbased on their creation date, newest first.\n\nThis endpoint is a listing.",
        "parameters": [
          {
            "description": "fullname of a thing",
            "in": "query",
            "name": "after",
            "type": "string"
          },
          {
            "description": "fullname of a thing",
            "in": "query",
            "name": "before",
            "type": "string"
          },
          {
            "description": "a positive integer (default: 0)",
            "in": "query",
            "name": "count",
            "type": "string"
          },
          {
            "description": "boolean value",
            "in": "query",
            "name": "include_categories",
            "type": "string"
          },
          {
            "description": "the maximum number of items desired (default: 25, maximum: 100)",
            "in": "query",
            "name": "limit",
            "type": "string"
          },
          {
            "description": "(optional) the string all",
            "in": "query",
            "name": "show",
            "type": "string"
          },
          {
            "description": "(optional) expand subreddits",
            "in": "query",
            "name": "sr_detail",
            "type": "string"
          },
          {
            "in": "path",
            "name": "where",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/subreddits/mine/{where}": {
      "get": {
        "description": "Get subreddits the user has a relationship with.\n\nThe where parameter chooses which subreddits are returned as follows:\n\n\nsubscriber - subreddits the user is subscribed to\ncontributor - subreddits the user is an approved submitter in\nmoderator - subreddits the user is a moderator of\nstreams - subscribed to subreddits that contain hosted video links\n\n\nSee also: /api/subscribe,\n/api/friend, and\n/api/accept_moderator_invite.\n\nThis endpoint is a listing.",
        "parameters": [
          {
            "description": "fullname of a thing",
            "in": "query",
            "name": "after",
            "type": "string"
          },
          {
            "description": "fullname of a thing",
            "in": "query",
            "name": "before",
            "type": "string"
          },
          {
            "description": "a positive integer (default: 0)",
            "in": "query",
            "name": "count",
            "type": "string"
          },
          {
            "description": "boolean value",
            "in": "query",
            "name": "include_categories",
            "type": "string"
          },
          {
            "description": "the maximum number of items desired (default: 25, maximum: 100)",
            "in": "query",
            "name": "limit",
            "type": "string"
          },
          {
            "description": "(optional) the string all",
            "in": "query",
            "name": "show",
            "type": "string"
          },
          {
            "description": "(optional) expand subreddits",
            "in": "query",
            "name": "sr_detail",
            "type": "string"
          },
          {
            "in": "path",
            "name": "where",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/subreddits/search": {
      "get": {
        "description": "Search subreddits by title and description.\n\nThis endpoint is a listing.",
        "parameters": [
          {
            "description": "fullname of a thing",
            "in": "query",
            "name": "after",
            "type": "string"
          },
          {
            "description": "fullname of a thing",
            "in": "query",
            "name": "before",
            "type": "string"
          },
          {
            "description": "a positive integer (default: 0)",
            "in": "query",
            "name": "count",
            "type": "string"
          },
          {
            "description": "the maximum number of items desired (default: 25, maximum: 100)",
            "in": "query",
            "name": "limit",
            "type": "string"
          },
          {
            "description": "a search query",
            "in": "query",
            "name": "q",
            "type": "string"
          },
          {
            "description": "(optional) the string all",
            "in": "query",
            "name": "show",
            "type": "string"
          },
          {
            "description": "boolean value",
            "in": "query",
            "name": "show_users",
            "type": "string"
          },
          {
            "description": "one of (relevance, activity)",
            "in": "query",
            "name": "sort",
            "type": "string"
          },
          {
            "description": "(optional) expand subreddits",
            "in": "query",
            "name": "sr_detail",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/user/{username}/{where}": {
      "get": {
        "description": "This endpoint is a listing.",
        "parameters": [
          {
            "description": "fullname of a thing",
            "in": "query",
            "name": "after",
            "type": "string"
          },
          {
            "description": "fullname of a thing",
            "in": "query",
            "name": "before",
            "type": "string"
          },
          {
            "description": "an integer between 2 and 10",
            "in": "query",
            "name": "context",
            "type": "string"
          },
          {
            "description": "a positive integer (default: 0)",
            "in": "query",
            "name": "count",
            "type": "string"
          },
          {
            "description": "boolean value",
            "in": "query",
            "name": "include_categories",
            "type": "string"
          },
          {
            "description": "the maximum number of items desired (default: 25, maximum: 100)",
            "in": "query",
            "name": "limit",
            "type": "string"
          },
          {
            "description": "one of (given)",
            "in": "query",
            "name": "show",
            "type": "string"
          },
          {
            "description": "one of (hot, new, top, controversial)",
            "in": "query",
            "name": "sort",
            "type": "string"
          },
          {
            "description": "(optional) expand subreddits",
            "in": "query",
            "name": "sr_detail",
            "type": "string"
          },
          {
            "description": "one of (hour, day, week, month, year, all)",
            "in": "query",
            "name": "t",
            "type": "string"
          },
          {
            "description": "one of (links, comments)",
            "in": "query",
            "name": "type",
            "type": "string"
          },
          {
            "description": "the name of an existing user",
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "where",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/user/{username}/about": {
      "get": {
        "description": "Return information about the user, including karma and gold status.",
        "parameters": [
          {
            "description": "the name of an existing user",
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/users/{where}": {
      "get": {
        "description": "Get all user subreddits.\n\nThe where parameter chooses the order in which the subreddits are\ndisplayed. popular sorts on the activity of the subreddit and the\nposition of the subreddits can shift around. new sorts the user\nsubreddits based on their creation date, newest first.\n\nThis endpoint is a listing.",
        "parameters": [
          {
            "description": "fullname of a thing",
            "in": "query",
            "name": "after",
            "type": "string"
          },
          {
            "description": "fullname of a thing",
            "in": "query",
            "name": "before",
            "type": "string"
          },
          {
            "description": "a positive integer (default: 0)",
            "in": "query",
            "name": "count",
            "type": "string"
          },
          {
            "description": "boolean value",
            "in": "query",
            "name": "include_categories",
            "type": "string"
          },
          {
            "description": "the maximum number of items desired (default: 25, maximum: 100)",
            "in": "query",
            "name": "limit",
            "type": "string"
          },
          {
            "description": "(optional) the string all",
            "in": "query",
            "name": "show",
            "type": "string"
          },
          {
            "description": "(optional) expand subreddits",
            "in": "query",
            "name": "sr_detail",
            "type": "string"
          },
          {
            "in": "path",
            "name": "where",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/wiki/{page}": {
      "get": {
        "description": "Return the content of a wiki page\n\nIf v is given, show the wiki page as it was at that version\nIf both v and v2 are given, show a diff of the two",
        "parameters": [
          {
            "description": "the name of an existing wiki page",
            "in": "path",
            "name": "page",
            "required": true,
            "type": "string"
          },
          {
            "description": "a wiki revision ID",
            "in": "query",
            "name": "v",
            "type": "string"
          },
          {
            "description": "a wiki revision ID",
            "in": "query",
            "name": "v2",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/wiki/discussions/{page}": {
      "get": {
        "description": "Retrieve a list of discussions about this wiki page\n\nThis endpoint is a listing.",
        "parameters": [
          {
            "description": "fullname of a thing",
            "in": "query",
            "name": "after",
            "type": "string"
          },
          {
            "description": "fullname of a thing",
            "in": "query",
            "name": "before",
            "type": "string"
          },
          {
            "description": "a positive integer (default: 0)",
            "in": "query",
            "name": "count",
            "type": "string"
          },
          {
            "description": "the maximum number of items desired (default: 25, maximum: 100)",
            "in": "query",
            "name": "limit",
            "type": "string"
          },
          {
            "description": "the name of an existing wiki page",
            "in": "path",
            "name": "page",
            "required": true,
            "type": "string"
          },
          {
            "description": "(optional) the string all",
            "in": "query",
            "name": "show",
            "type": "string"
          },
          {
            "description": "(optional) expand subreddits",
            "in": "query",
            "name": "sr_detail",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/wiki/pages": {
      "get": {
        "description": "Retrieve a list of wiki pages in this subreddit",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/wiki/revisions": {
      "get": {
        "description": "Retrieve a list of recently changed wiki pages in this subreddit",
        "parameters": [
          {
            "description": "fullname of a thing",
            "in": "query",
            "name": "after",
            "type": "string"
          },
          {
            "description": "fullname of a thing",
            "in": "query",
            "name": "before",
            "type": "string"
          },
          {
            "description": "a positive integer (default: 0)",
            "in": "query",
            "name": "count",
            "type": "string"
          },
          {
            "description": "the maximum number of items desired (default: 25, maximum: 100)",
            "in": "query",
            "name": "limit",
            "type": "string"
          },
          {
            "description": "(optional) the string all",
            "in": "query",
            "name": "show",
            "type": "string"
          },
          {
            "description": "(optional) expand subreddits",
            "in": "query",
            "name": "sr_detail",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/wiki/revisions/{page}": {
      "get": {
        "description": "Retrieve a list of revisions of this wiki page\n\nThis endpoint is a listing.",
        "parameters": [
          {
            "description": "fullname of a thing",
            "in": "query",
            "name": "after",
            "type": "string"
          },
          {
            "description": "fullname of a thing",
            "in": "query",
            "name": "before",
            "type": "string"
          },
          {
            "description": "a positive integer (default: 0)",
            "in": "query",
            "name": "count",
            "type": "string"
          },
          {
            "description": "the maximum number of items desired (default: 25, maximum: 100)",
            "in": "query",
            "name": "limit",
            "type": "string"
          },
          {
            "description": "the name of an existing wiki page",
            "in": "path",
            "name": "page",
            "required": true,
            "type": "string"
          },
          {
            "description": "(optional) the string all",
            "in": "query",
            "name": "show",
            "type": "string"
          },
          {
            "description": "(optional) expand subreddits",
            "in": "query",
            "name": "sr_detail",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/wiki/settings/{page}": {
      "get": {
        "description": "Retrieve the current permission settings for page",
        "parameters": [
          {
            "description": "the name of an existing wiki page",
            "in": "path",
            "name": "page",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      },
      "post": {
        "description": "Update the permissions and visibility of wiki page",
        "parameters": [
          {
            "description": "boolean value",
            "in": "formData",
            "name": "listed",
            "type": "string"
          },
          {
            "description": "the name of an existing wiki page",
            "in": "path",
            "name": "page",
            "required": true,
            "type": "string"
          },
          {
            "description": "an integer",
            "in": "formData",
            "name": "permlevel",
            "type": "string"
          },
          {
            "description": "a modhash",
            "in": "formData",
            "name": "uh",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    }
  },
  "schemes": [
    "https"
  ],
  "securityDefinitions": {
    "OAuth": {
      "authorizationUrl": "https://www.reddit.com/api/v1/authorize",
      "flow": "accessCode",
      "scopes": {
        "account": "Update preferences and related account information. Will not have access to your email or password.",
        "creddits": "Spend my reddit gold creddits on giving gold to other users.",
        "edit": "Edit and delete my comments and submissions.",
        "flair": "Select my subreddit flair. Change link flair on my submissions.",
        "history": "Access my voting history and comments or submissions I've saved or hidden.",
        "identity": "Access my reddit username and signup date.",
        "livemanage": "Manage settings and contributors of live threads I contribute to.",
        "modconfig": "Manage the configuration, sidebar, and CSS of subreddits I moderate.",
        "modcontributors": "Add/remove users to approved submitter lists and ban/unban or mute/unmute users from subreddits I moderate.",
        "modflair": "Manage and assign flair in subreddits I moderate.",
        "modlog": "Access the moderation log in subreddits I moderate.",
        "modothers": "Invite or remove other moderators from subreddits I moderate.",
        "modposts": "Approve, remove, mark nsfw, and distinguish content in subreddits I moderate.",
        "modself": "Accept invitations to moderate a subreddit. Remove myself as a moderator or contributor of subreddits I moderate or contribute to.",
        "modtraffic": "Access traffic stats in subreddits I moderate.",
        "modwiki": "Change editors and visibility of wiki pages in subreddits I moderate.",
        "mysubreddits": "Access the list of subreddits I moderate, contribute to, and subscribe to.",
        "privatemessages": "Access my inbox and send private messages to other users.",
        "read": "Access posts and comments through my account.",
        "report": "Report content for rules violations. Hide &amp; show individual submissions.",
        "save": "Save and unsave comments and submissions.",
        "submit": "Submit links and comments from my account.",
        "subscribe": "Manage my subreddit subscriptions. Manage \"friends\" - users whose content I follow.",
        "vote": "Submit and change my votes on comments and submissions.",
        "wikiedit": "Edit wiki pages on my behalf",
        "wikiread": "Read wiki pages through my account"
      },
      "tokenUrl": "https://www.reddit.com/api/v1/access_token",
      "type": "oauth2"
    }
  },
  "swagger": "2.0"
}